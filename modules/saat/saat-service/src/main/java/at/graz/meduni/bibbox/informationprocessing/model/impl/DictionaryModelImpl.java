/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.bibbox.informationprocessing.model.impl;

import aQute.bnd.annotation.ProviderType;

import at.graz.meduni.bibbox.informationprocessing.model.Dictionary;
import at.graz.meduni.bibbox.informationprocessing.model.DictionaryModel;
import at.graz.meduni.bibbox.informationprocessing.model.DictionarySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Dictionary service. Represents a row in the &quot;SAAT_Dictionary&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DictionaryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DictionaryImpl}.
 * </p>
 *
 * @author robert
 * @see DictionaryImpl
 * @see Dictionary
 * @see DictionaryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DictionaryModelImpl extends BaseModelImpl<Dictionary>
	implements DictionaryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dictionary model instance should use the {@link Dictionary} interface instead.
	 */
	public static final String TABLE_NAME = "SAAT_Dictionary";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "dictionaryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "synonym", Types.VARCHAR },
			{ "pattern", Types.VARCHAR },
			{ "code_", Types.BOOLEAN },
			{ "code_type", Types.VARCHAR },
			{ "code_value", Types.VARCHAR },
			{ "root", Types.BOOLEAN },
			{ "negation", Types.BOOLEAN },
			{ "priority", Types.INTEGER },
			{ "priority_mode", Types.BOOLEAN },
			{ "before_synonym", Types.INTEGER },
			{ "after_synonym", Types.INTEGER },
			{ "foreword", Types.BOOLEAN },
			{ "ending", Types.BOOLEAN },
			{ "sentence", Types.BOOLEAN },
			{ "occure", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dictionaryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("synonym", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pattern", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("code_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_value", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("root", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("negation", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("priority", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("priority_mode", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("before_synonym", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("after_synonym", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("foreword", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("ending", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("sentence", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("occure", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table SAAT_Dictionary (uuid_ VARCHAR(75) null,dictionaryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,synonym VARCHAR(75) null,pattern VARCHAR(75) null,code_ BOOLEAN,code_type VARCHAR(75) null,code_value VARCHAR(75) null,root BOOLEAN,negation BOOLEAN,priority INTEGER,priority_mode BOOLEAN,before_synonym INTEGER,after_synonym INTEGER,foreword BOOLEAN,ending BOOLEAN,sentence BOOLEAN,occure BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SAAT_Dictionary";
	public static final String ORDER_BY_JPQL = " ORDER BY dictionary.dictionaryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SAAT_Dictionary.dictionaryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(at.graz.meduni.bibbox.informationprocessing.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.bibbox.informationprocessing.model.Dictionary"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(at.graz.meduni.bibbox.informationprocessing.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.bibbox.informationprocessing.model.Dictionary"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(at.graz.meduni.bibbox.informationprocessing.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.bibbox.informationprocessing.model.Dictionary"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long DICTIONARYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long ROOT_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Dictionary toModel(DictionarySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Dictionary model = new DictionaryImpl();

		model.setUuid(soapModel.getUuid());
		model.setDictionaryId(soapModel.getDictionaryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setSynonym(soapModel.getSynonym());
		model.setPattern(soapModel.getPattern());
		model.setCode(soapModel.getCode());
		model.setCode_type(soapModel.getCode_type());
		model.setCode_value(soapModel.getCode_value());
		model.setRoot(soapModel.getRoot());
		model.setNegation(soapModel.getNegation());
		model.setPriority(soapModel.getPriority());
		model.setPriority_mode(soapModel.getPriority_mode());
		model.setBefore_synonym(soapModel.getBefore_synonym());
		model.setAfter_synonym(soapModel.getAfter_synonym());
		model.setForeword(soapModel.getForeword());
		model.setEnding(soapModel.getEnding());
		model.setSentence(soapModel.getSentence());
		model.setOccure(soapModel.getOccure());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Dictionary> toModels(DictionarySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Dictionary> models = new ArrayList<Dictionary>(soapModels.length);

		for (DictionarySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(at.graz.meduni.bibbox.informationprocessing.service.util.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.bibbox.informationprocessing.model.Dictionary"));

	public DictionaryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dictionaryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDictionaryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dictionaryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Dictionary.class;
	}

	@Override
	public String getModelClassName() {
		return Dictionary.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("dictionaryId", getDictionaryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("synonym", getSynonym());
		attributes.put("pattern", getPattern());
		attributes.put("code", getCode());
		attributes.put("code_type", getCode_type());
		attributes.put("code_value", getCode_value());
		attributes.put("root", getRoot());
		attributes.put("negation", getNegation());
		attributes.put("priority", getPriority());
		attributes.put("priority_mode", getPriority_mode());
		attributes.put("before_synonym", getBefore_synonym());
		attributes.put("after_synonym", getAfter_synonym());
		attributes.put("foreword", getForeword());
		attributes.put("ending", getEnding());
		attributes.put("sentence", getSentence());
		attributes.put("occure", getOccure());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long dictionaryId = (Long)attributes.get("dictionaryId");

		if (dictionaryId != null) {
			setDictionaryId(dictionaryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String synonym = (String)attributes.get("synonym");

		if (synonym != null) {
			setSynonym(synonym);
		}

		String pattern = (String)attributes.get("pattern");

		if (pattern != null) {
			setPattern(pattern);
		}

		Boolean code = (Boolean)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String code_type = (String)attributes.get("code_type");

		if (code_type != null) {
			setCode_type(code_type);
		}

		String code_value = (String)attributes.get("code_value");

		if (code_value != null) {
			setCode_value(code_value);
		}

		Boolean root = (Boolean)attributes.get("root");

		if (root != null) {
			setRoot(root);
		}

		Boolean negation = (Boolean)attributes.get("negation");

		if (negation != null) {
			setNegation(negation);
		}

		Integer priority = (Integer)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		Boolean priority_mode = (Boolean)attributes.get("priority_mode");

		if (priority_mode != null) {
			setPriority_mode(priority_mode);
		}

		Integer before_synonym = (Integer)attributes.get("before_synonym");

		if (before_synonym != null) {
			setBefore_synonym(before_synonym);
		}

		Integer after_synonym = (Integer)attributes.get("after_synonym");

		if (after_synonym != null) {
			setAfter_synonym(after_synonym);
		}

		Boolean foreword = (Boolean)attributes.get("foreword");

		if (foreword != null) {
			setForeword(foreword);
		}

		Boolean ending = (Boolean)attributes.get("ending");

		if (ending != null) {
			setEnding(ending);
		}

		Boolean sentence = (Boolean)attributes.get("sentence");

		if (sentence != null) {
			setSentence(sentence);
		}

		Boolean occure = (Boolean)attributes.get("occure");

		if (occure != null) {
			setOccure(occure);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getDictionaryId() {
		return _dictionaryId;
	}

	@Override
	public void setDictionaryId(long dictionaryId) {
		_columnBitmask = -1L;

		if (!_setOriginalDictionaryId) {
			_setOriginalDictionaryId = true;

			_originalDictionaryId = _dictionaryId;
		}

		_dictionaryId = dictionaryId;
	}

	public long getOriginalDictionaryId() {
		return _originalDictionaryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getSynonym() {
		if (_synonym == null) {
			return StringPool.BLANK;
		}
		else {
			return _synonym;
		}
	}

	@Override
	public void setSynonym(String synonym) {
		_synonym = synonym;
	}

	@JSON
	@Override
	public String getPattern() {
		if (_pattern == null) {
			return StringPool.BLANK;
		}
		else {
			return _pattern;
		}
	}

	@Override
	public void setPattern(String pattern) {
		_pattern = pattern;
	}

	@JSON
	@Override
	public boolean getCode() {
		return _code;
	}

	@JSON
	@Override
	public boolean isCode() {
		return _code;
	}

	@Override
	public void setCode(boolean code) {
		_code = code;
	}

	@JSON
	@Override
	public String getCode_type() {
		if (_code_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _code_type;
		}
	}

	@Override
	public void setCode_type(String code_type) {
		_code_type = code_type;
	}

	@JSON
	@Override
	public String getCode_value() {
		if (_code_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _code_value;
		}
	}

	@Override
	public void setCode_value(String code_value) {
		_code_value = code_value;
	}

	@JSON
	@Override
	public boolean getRoot() {
		return _root;
	}

	@JSON
	@Override
	public boolean isRoot() {
		return _root;
	}

	@Override
	public void setRoot(boolean root) {
		_columnBitmask |= ROOT_COLUMN_BITMASK;

		if (!_setOriginalRoot) {
			_setOriginalRoot = true;

			_originalRoot = _root;
		}

		_root = root;
	}

	public boolean getOriginalRoot() {
		return _originalRoot;
	}

	@JSON
	@Override
	public boolean getNegation() {
		return _negation;
	}

	@JSON
	@Override
	public boolean isNegation() {
		return _negation;
	}

	@Override
	public void setNegation(boolean negation) {
		_negation = negation;
	}

	@JSON
	@Override
	public int getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(int priority) {
		_priority = priority;
	}

	@JSON
	@Override
	public boolean getPriority_mode() {
		return _priority_mode;
	}

	@JSON
	@Override
	public boolean isPriority_mode() {
		return _priority_mode;
	}

	@Override
	public void setPriority_mode(boolean priority_mode) {
		_priority_mode = priority_mode;
	}

	@JSON
	@Override
	public int getBefore_synonym() {
		return _before_synonym;
	}

	@Override
	public void setBefore_synonym(int before_synonym) {
		_before_synonym = before_synonym;
	}

	@JSON
	@Override
	public int getAfter_synonym() {
		return _after_synonym;
	}

	@Override
	public void setAfter_synonym(int after_synonym) {
		_after_synonym = after_synonym;
	}

	@JSON
	@Override
	public boolean getForeword() {
		return _foreword;
	}

	@JSON
	@Override
	public boolean isForeword() {
		return _foreword;
	}

	@Override
	public void setForeword(boolean foreword) {
		_foreword = foreword;
	}

	@JSON
	@Override
	public boolean getEnding() {
		return _ending;
	}

	@JSON
	@Override
	public boolean isEnding() {
		return _ending;
	}

	@Override
	public void setEnding(boolean ending) {
		_ending = ending;
	}

	@JSON
	@Override
	public boolean getSentence() {
		return _sentence;
	}

	@JSON
	@Override
	public boolean isSentence() {
		return _sentence;
	}

	@Override
	public void setSentence(boolean sentence) {
		_sentence = sentence;
	}

	@JSON
	@Override
	public boolean getOccure() {
		return _occure;
	}

	@JSON
	@Override
	public boolean isOccure() {
		return _occure;
	}

	@Override
	public void setOccure(boolean occure) {
		_occure = occure;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Dictionary.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Dictionary.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Dictionary toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Dictionary)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DictionaryImpl dictionaryImpl = new DictionaryImpl();

		dictionaryImpl.setUuid(getUuid());
		dictionaryImpl.setDictionaryId(getDictionaryId());
		dictionaryImpl.setGroupId(getGroupId());
		dictionaryImpl.setCompanyId(getCompanyId());
		dictionaryImpl.setUserId(getUserId());
		dictionaryImpl.setUserName(getUserName());
		dictionaryImpl.setCreateDate(getCreateDate());
		dictionaryImpl.setModifiedDate(getModifiedDate());
		dictionaryImpl.setStatus(getStatus());
		dictionaryImpl.setStatusByUserId(getStatusByUserId());
		dictionaryImpl.setStatusByUserName(getStatusByUserName());
		dictionaryImpl.setStatusDate(getStatusDate());
		dictionaryImpl.setSynonym(getSynonym());
		dictionaryImpl.setPattern(getPattern());
		dictionaryImpl.setCode(getCode());
		dictionaryImpl.setCode_type(getCode_type());
		dictionaryImpl.setCode_value(getCode_value());
		dictionaryImpl.setRoot(getRoot());
		dictionaryImpl.setNegation(getNegation());
		dictionaryImpl.setPriority(getPriority());
		dictionaryImpl.setPriority_mode(getPriority_mode());
		dictionaryImpl.setBefore_synonym(getBefore_synonym());
		dictionaryImpl.setAfter_synonym(getAfter_synonym());
		dictionaryImpl.setForeword(getForeword());
		dictionaryImpl.setEnding(getEnding());
		dictionaryImpl.setSentence(getSentence());
		dictionaryImpl.setOccure(getOccure());

		dictionaryImpl.resetOriginalValues();

		return dictionaryImpl;
	}

	@Override
	public int compareTo(Dictionary dictionary) {
		int value = 0;

		if (getDictionaryId() < dictionary.getDictionaryId()) {
			value = -1;
		}
		else if (getDictionaryId() > dictionary.getDictionaryId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Dictionary)) {
			return false;
		}

		Dictionary dictionary = (Dictionary)obj;

		long primaryKey = dictionary.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DictionaryModelImpl dictionaryModelImpl = this;

		dictionaryModelImpl._originalUuid = dictionaryModelImpl._uuid;

		dictionaryModelImpl._originalDictionaryId = dictionaryModelImpl._dictionaryId;

		dictionaryModelImpl._setOriginalDictionaryId = false;

		dictionaryModelImpl._originalGroupId = dictionaryModelImpl._groupId;

		dictionaryModelImpl._setOriginalGroupId = false;

		dictionaryModelImpl._originalCompanyId = dictionaryModelImpl._companyId;

		dictionaryModelImpl._setOriginalCompanyId = false;

		dictionaryModelImpl._setModifiedDate = false;

		dictionaryModelImpl._originalRoot = dictionaryModelImpl._root;

		dictionaryModelImpl._setOriginalRoot = false;

		dictionaryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Dictionary> toCacheModel() {
		DictionaryCacheModel dictionaryCacheModel = new DictionaryCacheModel();

		dictionaryCacheModel.uuid = getUuid();

		String uuid = dictionaryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dictionaryCacheModel.uuid = null;
		}

		dictionaryCacheModel.dictionaryId = getDictionaryId();

		dictionaryCacheModel.groupId = getGroupId();

		dictionaryCacheModel.companyId = getCompanyId();

		dictionaryCacheModel.userId = getUserId();

		dictionaryCacheModel.userName = getUserName();

		String userName = dictionaryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dictionaryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dictionaryCacheModel.createDate = createDate.getTime();
		}
		else {
			dictionaryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dictionaryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dictionaryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dictionaryCacheModel.status = getStatus();

		dictionaryCacheModel.statusByUserId = getStatusByUserId();

		dictionaryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = dictionaryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			dictionaryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			dictionaryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			dictionaryCacheModel.statusDate = Long.MIN_VALUE;
		}

		dictionaryCacheModel.synonym = getSynonym();

		String synonym = dictionaryCacheModel.synonym;

		if ((synonym != null) && (synonym.length() == 0)) {
			dictionaryCacheModel.synonym = null;
		}

		dictionaryCacheModel.pattern = getPattern();

		String pattern = dictionaryCacheModel.pattern;

		if ((pattern != null) && (pattern.length() == 0)) {
			dictionaryCacheModel.pattern = null;
		}

		dictionaryCacheModel.code = getCode();

		dictionaryCacheModel.code_type = getCode_type();

		String code_type = dictionaryCacheModel.code_type;

		if ((code_type != null) && (code_type.length() == 0)) {
			dictionaryCacheModel.code_type = null;
		}

		dictionaryCacheModel.code_value = getCode_value();

		String code_value = dictionaryCacheModel.code_value;

		if ((code_value != null) && (code_value.length() == 0)) {
			dictionaryCacheModel.code_value = null;
		}

		dictionaryCacheModel.root = getRoot();

		dictionaryCacheModel.negation = getNegation();

		dictionaryCacheModel.priority = getPriority();

		dictionaryCacheModel.priority_mode = getPriority_mode();

		dictionaryCacheModel.before_synonym = getBefore_synonym();

		dictionaryCacheModel.after_synonym = getAfter_synonym();

		dictionaryCacheModel.foreword = getForeword();

		dictionaryCacheModel.ending = getEnding();

		dictionaryCacheModel.sentence = getSentence();

		dictionaryCacheModel.occure = getOccure();

		return dictionaryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(55);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", dictionaryId=");
		sb.append(getDictionaryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", synonym=");
		sb.append(getSynonym());
		sb.append(", pattern=");
		sb.append(getPattern());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", code_type=");
		sb.append(getCode_type());
		sb.append(", code_value=");
		sb.append(getCode_value());
		sb.append(", root=");
		sb.append(getRoot());
		sb.append(", negation=");
		sb.append(getNegation());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", priority_mode=");
		sb.append(getPriority_mode());
		sb.append(", before_synonym=");
		sb.append(getBefore_synonym());
		sb.append(", after_synonym=");
		sb.append(getAfter_synonym());
		sb.append(", foreword=");
		sb.append(getForeword());
		sb.append(", ending=");
		sb.append(getEnding());
		sb.append(", sentence=");
		sb.append(getSentence());
		sb.append(", occure=");
		sb.append(getOccure());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(85);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.bibbox.informationprocessing.model.Dictionary");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dictionaryId</column-name><column-value><![CDATA[");
		sb.append(getDictionaryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synonym</column-name><column-value><![CDATA[");
		sb.append(getSynonym());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pattern</column-name><column-value><![CDATA[");
		sb.append(getPattern());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code_type</column-name><column-value><![CDATA[");
		sb.append(getCode_type());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code_value</column-name><column-value><![CDATA[");
		sb.append(getCode_value());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>root</column-name><column-value><![CDATA[");
		sb.append(getRoot());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>negation</column-name><column-value><![CDATA[");
		sb.append(getNegation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority_mode</column-name><column-value><![CDATA[");
		sb.append(getPriority_mode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>before_synonym</column-name><column-value><![CDATA[");
		sb.append(getBefore_synonym());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>after_synonym</column-name><column-value><![CDATA[");
		sb.append(getAfter_synonym());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>foreword</column-name><column-value><![CDATA[");
		sb.append(getForeword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ending</column-name><column-value><![CDATA[");
		sb.append(getEnding());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sentence</column-name><column-value><![CDATA[");
		sb.append(getSentence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>occure</column-name><column-value><![CDATA[");
		sb.append(getOccure());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Dictionary.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Dictionary.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _dictionaryId;
	private long _originalDictionaryId;
	private boolean _setOriginalDictionaryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _synonym;
	private String _pattern;
	private boolean _code;
	private String _code_type;
	private String _code_value;
	private boolean _root;
	private boolean _originalRoot;
	private boolean _setOriginalRoot;
	private boolean _negation;
	private int _priority;
	private boolean _priority_mode;
	private int _before_synonym;
	private int _after_synonym;
	private boolean _foreword;
	private boolean _ending;
	private boolean _sentence;
	private boolean _occure;
	private long _columnBitmask;
	private Dictionary _escapedModel;
}