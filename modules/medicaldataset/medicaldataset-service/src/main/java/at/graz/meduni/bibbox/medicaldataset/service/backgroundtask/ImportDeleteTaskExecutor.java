package at.graz.meduni.bibbox.medicaldataset.service.backgroundtask;

import com.liferay.document.library.kernel.service.DLAppServiceUtil;
import com.liferay.portal.kernel.backgroundtask.BackgroundTask;
import com.liferay.portal.kernel.backgroundtask.BackgroundTaskConstants;
import com.liferay.portal.kernel.backgroundtask.BackgroundTaskExecutor;
import com.liferay.portal.kernel.backgroundtask.BackgroundTaskResult;
import com.liferay.portal.kernel.backgroundtask.BaseBackgroundTaskExecutor;
import com.liferay.portal.kernel.backgroundtask.display.BackgroundTaskDisplay;
import com.liferay.portal.kernel.backgroundtask.display.BackgroundTaskDisplayFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.repository.model.FileEntry;
import com.liferay.portal.kernel.service.ServiceContext;

import java.util.List;
import java.util.Map;

import org.osgi.service.component.annotations.Component;

import at.graz.meduni.bibbox.medicaldataset.exception.NoSuchPathologyDataException;
import at.graz.meduni.bibbox.medicaldataset.model.ImportMedicalDataSet;
import at.graz.meduni.bibbox.medicaldataset.model.ImportMedicalDataSetFieldMap;
import at.graz.meduni.bibbox.medicaldataset.model.ImportMedicalDataSetLog;
import at.graz.meduni.bibbox.medicaldataset.model.MedicalRecord;
import at.graz.meduni.bibbox.medicaldataset.model.PathologyData;
import at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetFieldMapLocalServiceUtil;
import at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetLocalServiceUtil;
import at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetLogLocalServiceUtil;
import at.graz.meduni.bibbox.medicaldataset.service.MedicalRecordLocalServiceUtil;
import at.graz.meduni.bibbox.medicaldataset.service.PathologyDataLocalServiceUtil;

@Component(
	immediate = true, 
	property = {"background.task.executor.class.name=at.graz.meduni.bibbox.medicaldataset.service.backgroundtask.BaseBackgroundTaskExecutor"}, 
	service = BackgroundTaskExecutor.class
)
public class ImportDeleteTaskExecutor extends BaseBackgroundTaskExecutor {
	
	long importMedicalDataSetId_ = 0;
	ServiceContext serviceContext_ = null;
	
	public ImportDeleteTaskExecutor() {
		setBackgroundTaskStatusMessageTranslator(new ImportDeleteTaskStatusMessageTranslator());
	}
	
	@Override
	public BackgroundTaskResult execute(BackgroundTask backgroundTask) throws Exception {
		System.out.println("ImportDeleteTaskExecutor START");
		Map taskContextMap = backgroundTask.getTaskContextMap();
		
		serviceContext_ = new ServiceContext();
		long scopeGroupId = Long.parseLong(taskContextMap.get("scopeGroupId").toString());
		long userId = Long.parseLong(taskContextMap.get("userId").toString());
		serviceContext_.setScopeGroupId(scopeGroupId);
		serviceContext_.setUserId(userId);
		
		importMedicalDataSetId_ = Long.parseLong(taskContextMap.get("importMedicalDataSetId").toString());
		ImportMedicalDataSet importMedicalDataSet = ImportMedicalDataSetLocalServiceUtil.getImportMedicalDataSet(importMedicalDataSetId_);
		
		//TODO: Setup
		boolean deleteData = Boolean.getBoolean(taskContextMap.get("deleteData").toString());
		
		if(deleteData) {
			deleteAllDataElements();
		}
		
		deleteImportTask(importMedicalDataSet);
		
		return BackgroundTaskResult.SUCCESS;
	}
	
	/*
	 * Deletes all entries generated by the Import Task
	 */
	private void deleteAllDataElements() {
		List<MedicalRecord> listMedicalRecord = MedicalRecordLocalServiceUtil.getMedicalRecordsFromImport(importMedicalDataSetId_);
		for(MedicalRecord medicalRecord : listMedicalRecord) {
			deletePathologyData(medicalRecord.getMedicalRecordId());
			MedicalRecordLocalServiceUtil.deleteMedicalRecord(medicalRecord);
		}
	}
	
	private void deletePathologyData(long medicalRecordId) {
		try {
			PathologyData pathologyData = PathologyDataLocalServiceUtil.getPathologyDataForMedicalRecord(medicalRecordId);
			PathologyDataLocalServiceUtil.deletePathologyData(pathologyData);
		} catch (NoSuchPathologyDataException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/*
	 * Deletes the uploaded File and the Task
	 */
	private void deleteImportTask(ImportMedicalDataSet importMedicalDataSet) {
		try {
			DLAppServiceUtil.deleteFileEntry(importMedicalDataSet.getFileId());
		} catch (PortalException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		deleteImportMedicalDataSetLogs();
		deleteImportMedicalDataSetFieldMaps();
		ImportMedicalDataSetLocalServiceUtil.deleteImportMedicalDataSet(importMedicalDataSet);
	}
	
	private void deleteImportMedicalDataSetLogs() {
		List<ImportMedicalDataSetLog> listImportMedicalDataSetLog = ImportMedicalDataSetLogLocalServiceUtil.getImportMedicalDataSetFromImports(importMedicalDataSetId_);
		for(ImportMedicalDataSetLog importMedicalDataSetLog : listImportMedicalDataSetLog) {
			ImportMedicalDataSetLogLocalServiceUtil.deleteImportMedicalDataSetLog(importMedicalDataSetLog);
		}
	}
	
	private void deleteImportMedicalDataSetFieldMaps() {
		List<ImportMedicalDataSetFieldMap> listImportMedicalDataSetFieldMap = ImportMedicalDataSetFieldMapLocalServiceUtil.getImportMedicalDataSetFieldMapsFromImportMedicalDataSet(importMedicalDataSetId_);
		for(ImportMedicalDataSetFieldMap importMedicalDataSetFieldMap : listImportMedicalDataSetFieldMap) {
			ImportMedicalDataSetFieldMapLocalServiceUtil.deleteImportMedicalDataSetFieldMap(importMedicalDataSetFieldMap);
		}
	}

	@Override
	public BackgroundTaskDisplay getBackgroundTaskDisplay(BackgroundTask backgroundTask) {
		System.out.println("ImportDeleteTaskExecutor.getBackgroundTaskDisplay");
		return BackgroundTaskDisplayFactoryUtil.getBackgroundTaskDisplay(backgroundTask);
	}

	@Override
	public BackgroundTaskExecutor clone() {
		System.out.println("clone ImportDeleteTaskExecutor");
		return this;
	}

	@Override
	public boolean isSerial() {
		return true;
	}
	
	@Override
	public int getIsolationLevel() {
		return BackgroundTaskConstants.ISOLATION_LEVEL_TASK_NAME;
	}
}
