/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.bibbox.medicaldataset.service.base;

import aQute.bnd.annotation.ProviderType;

import at.graz.meduni.bibbox.medicaldataset.model.MedicalRecord;
import at.graz.meduni.bibbox.medicaldataset.service.MedicalRecordLocalService;
import at.graz.meduni.bibbox.medicaldataset.service.persistence.ImportMedicalDataSetFieldMapPersistence;
import at.graz.meduni.bibbox.medicaldataset.service.persistence.ImportMedicalDataSetLogPersistence;
import at.graz.meduni.bibbox.medicaldataset.service.persistence.ImportMedicalDataSetPersistence;
import at.graz.meduni.bibbox.medicaldataset.service.persistence.KloetzelBuchPersistence;
import at.graz.meduni.bibbox.medicaldataset.service.persistence.MedicalRecordPersistence;
import at.graz.meduni.bibbox.medicaldataset.service.persistence.PathologyDataPersistence;

import com.liferay.asset.kernel.service.persistence.AssetEntryPersistence;
import com.liferay.asset.kernel.service.persistence.AssetTagPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandler;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Criterion;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Disjunction;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Property;
import com.liferay.portal.kernel.dao.orm.PropertyFactoryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the medical record local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link at.graz.meduni.bibbox.medicaldataset.service.impl.MedicalRecordLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see at.graz.meduni.bibbox.medicaldataset.service.impl.MedicalRecordLocalServiceImpl
 * @see at.graz.meduni.bibbox.medicaldataset.service.MedicalRecordLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class MedicalRecordLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements MedicalRecordLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link at.graz.meduni.bibbox.medicaldataset.service.MedicalRecordLocalServiceUtil} to access the medical record local service.
	 */

	/**
	 * Adds the medical record to the database. Also notifies the appropriate model listeners.
	 *
	 * @param medicalRecord the medical record
	 * @return the medical record that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public MedicalRecord addMedicalRecord(MedicalRecord medicalRecord) {
		medicalRecord.setNew(true);

		return medicalRecordPersistence.update(medicalRecord);
	}

	/**
	 * Creates a new medical record with the primary key. Does not add the medical record to the database.
	 *
	 * @param medicalRecordId the primary key for the new medical record
	 * @return the new medical record
	 */
	@Override
	public MedicalRecord createMedicalRecord(long medicalRecordId) {
		return medicalRecordPersistence.create(medicalRecordId);
	}

	/**
	 * Deletes the medical record with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param medicalRecordId the primary key of the medical record
	 * @return the medical record that was removed
	 * @throws PortalException if a medical record with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public MedicalRecord deleteMedicalRecord(long medicalRecordId)
		throws PortalException {
		return medicalRecordPersistence.remove(medicalRecordId);
	}

	/**
	 * Deletes the medical record from the database. Also notifies the appropriate model listeners.
	 *
	 * @param medicalRecord the medical record
	 * @return the medical record that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public MedicalRecord deleteMedicalRecord(MedicalRecord medicalRecord) {
		return medicalRecordPersistence.remove(medicalRecord);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(MedicalRecord.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return medicalRecordPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link at.graz.meduni.bibbox.medicaldataset.model.impl.MedicalRecordModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return medicalRecordPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link at.graz.meduni.bibbox.medicaldataset.model.impl.MedicalRecordModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return medicalRecordPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return medicalRecordPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return medicalRecordPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public MedicalRecord fetchMedicalRecord(long medicalRecordId) {
		return medicalRecordPersistence.fetchByPrimaryKey(medicalRecordId);
	}

	/**
	 * Returns the medical record matching the UUID and group.
	 *
	 * @param uuid the medical record's UUID
	 * @param groupId the primary key of the group
	 * @return the matching medical record, or <code>null</code> if a matching medical record could not be found
	 */
	@Override
	public MedicalRecord fetchMedicalRecordByUuidAndGroupId(String uuid,
		long groupId) {
		return medicalRecordPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the medical record with the primary key.
	 *
	 * @param medicalRecordId the primary key of the medical record
	 * @return the medical record
	 * @throws PortalException if a medical record with the primary key could not be found
	 */
	@Override
	public MedicalRecord getMedicalRecord(long medicalRecordId)
		throws PortalException {
		return medicalRecordPersistence.findByPrimaryKey(medicalRecordId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(medicalRecordLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(MedicalRecord.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("medicalRecordId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(medicalRecordLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(MedicalRecord.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"medicalRecordId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(medicalRecordLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(MedicalRecord.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("medicalRecordId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					Criterion modifiedDateCriterion = portletDataContext.getDateRangeCriteria(
							"modifiedDate");

					Criterion statusDateCriterion = portletDataContext.getDateRangeCriteria(
							"statusDate");

					if ((modifiedDateCriterion != null) &&
							(statusDateCriterion != null)) {
						Disjunction disjunction = RestrictionsFactoryUtil.disjunction();

						disjunction.add(modifiedDateCriterion);
						disjunction.add(statusDateCriterion);

						dynamicQuery.add(disjunction);
					}

					Property workflowStatusProperty = PropertyFactoryUtil.forName(
							"status");

					if (portletDataContext.isInitialPublication()) {
						dynamicQuery.add(workflowStatusProperty.ne(
								WorkflowConstants.STATUS_IN_TRASH));
					}
					else {
						StagedModelDataHandler<?> stagedModelDataHandler = StagedModelDataHandlerRegistryUtil.getStagedModelDataHandler(MedicalRecord.class.getName());

						dynamicQuery.add(workflowStatusProperty.in(
								stagedModelDataHandler.getExportableStatuses()));
					}
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<MedicalRecord>() {
				@Override
				public void performAction(MedicalRecord medicalRecord)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						medicalRecord);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(MedicalRecord.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return medicalRecordLocalService.deleteMedicalRecord((MedicalRecord)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return medicalRecordPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the medical records matching the UUID and company.
	 *
	 * @param uuid the UUID of the medical records
	 * @param companyId the primary key of the company
	 * @return the matching medical records, or an empty list if no matches were found
	 */
	@Override
	public List<MedicalRecord> getMedicalRecordsByUuidAndCompanyId(
		String uuid, long companyId) {
		return medicalRecordPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of medical records matching the UUID and company.
	 *
	 * @param uuid the UUID of the medical records
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of medical records
	 * @param end the upper bound of the range of medical records (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching medical records, or an empty list if no matches were found
	 */
	@Override
	public List<MedicalRecord> getMedicalRecordsByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<MedicalRecord> orderByComparator) {
		return medicalRecordPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}

	/**
	 * Returns the medical record matching the UUID and group.
	 *
	 * @param uuid the medical record's UUID
	 * @param groupId the primary key of the group
	 * @return the matching medical record
	 * @throws PortalException if a matching medical record could not be found
	 */
	@Override
	public MedicalRecord getMedicalRecordByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return medicalRecordPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the medical records.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link at.graz.meduni.bibbox.medicaldataset.model.impl.MedicalRecordModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of medical records
	 * @param end the upper bound of the range of medical records (not inclusive)
	 * @return the range of medical records
	 */
	@Override
	public List<MedicalRecord> getMedicalRecords(int start, int end) {
		return medicalRecordPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of medical records.
	 *
	 * @return the number of medical records
	 */
	@Override
	public int getMedicalRecordsCount() {
		return medicalRecordPersistence.countAll();
	}

	/**
	 * Updates the medical record in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param medicalRecord the medical record
	 * @return the medical record that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public MedicalRecord updateMedicalRecord(MedicalRecord medicalRecord) {
		return medicalRecordPersistence.update(medicalRecord);
	}

	/**
	 * Returns the import medical data set local service.
	 *
	 * @return the import medical data set local service
	 */
	public at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetLocalService getImportMedicalDataSetLocalService() {
		return importMedicalDataSetLocalService;
	}

	/**
	 * Sets the import medical data set local service.
	 *
	 * @param importMedicalDataSetLocalService the import medical data set local service
	 */
	public void setImportMedicalDataSetLocalService(
		at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetLocalService importMedicalDataSetLocalService) {
		this.importMedicalDataSetLocalService = importMedicalDataSetLocalService;
	}

	/**
	 * Returns the import medical data set persistence.
	 *
	 * @return the import medical data set persistence
	 */
	public ImportMedicalDataSetPersistence getImportMedicalDataSetPersistence() {
		return importMedicalDataSetPersistence;
	}

	/**
	 * Sets the import medical data set persistence.
	 *
	 * @param importMedicalDataSetPersistence the import medical data set persistence
	 */
	public void setImportMedicalDataSetPersistence(
		ImportMedicalDataSetPersistence importMedicalDataSetPersistence) {
		this.importMedicalDataSetPersistence = importMedicalDataSetPersistence;
	}

	/**
	 * Returns the import medical data set field map local service.
	 *
	 * @return the import medical data set field map local service
	 */
	public at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetFieldMapLocalService getImportMedicalDataSetFieldMapLocalService() {
		return importMedicalDataSetFieldMapLocalService;
	}

	/**
	 * Sets the import medical data set field map local service.
	 *
	 * @param importMedicalDataSetFieldMapLocalService the import medical data set field map local service
	 */
	public void setImportMedicalDataSetFieldMapLocalService(
		at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetFieldMapLocalService importMedicalDataSetFieldMapLocalService) {
		this.importMedicalDataSetFieldMapLocalService = importMedicalDataSetFieldMapLocalService;
	}

	/**
	 * Returns the import medical data set field map persistence.
	 *
	 * @return the import medical data set field map persistence
	 */
	public ImportMedicalDataSetFieldMapPersistence getImportMedicalDataSetFieldMapPersistence() {
		return importMedicalDataSetFieldMapPersistence;
	}

	/**
	 * Sets the import medical data set field map persistence.
	 *
	 * @param importMedicalDataSetFieldMapPersistence the import medical data set field map persistence
	 */
	public void setImportMedicalDataSetFieldMapPersistence(
		ImportMedicalDataSetFieldMapPersistence importMedicalDataSetFieldMapPersistence) {
		this.importMedicalDataSetFieldMapPersistence = importMedicalDataSetFieldMapPersistence;
	}

	/**
	 * Returns the import medical data set log local service.
	 *
	 * @return the import medical data set log local service
	 */
	public at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetLogLocalService getImportMedicalDataSetLogLocalService() {
		return importMedicalDataSetLogLocalService;
	}

	/**
	 * Sets the import medical data set log local service.
	 *
	 * @param importMedicalDataSetLogLocalService the import medical data set log local service
	 */
	public void setImportMedicalDataSetLogLocalService(
		at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetLogLocalService importMedicalDataSetLogLocalService) {
		this.importMedicalDataSetLogLocalService = importMedicalDataSetLogLocalService;
	}

	/**
	 * Returns the import medical data set log persistence.
	 *
	 * @return the import medical data set log persistence
	 */
	public ImportMedicalDataSetLogPersistence getImportMedicalDataSetLogPersistence() {
		return importMedicalDataSetLogPersistence;
	}

	/**
	 * Sets the import medical data set log persistence.
	 *
	 * @param importMedicalDataSetLogPersistence the import medical data set log persistence
	 */
	public void setImportMedicalDataSetLogPersistence(
		ImportMedicalDataSetLogPersistence importMedicalDataSetLogPersistence) {
		this.importMedicalDataSetLogPersistence = importMedicalDataSetLogPersistence;
	}

	/**
	 * Returns the kloetzel buch local service.
	 *
	 * @return the kloetzel buch local service
	 */
	public at.graz.meduni.bibbox.medicaldataset.service.KloetzelBuchLocalService getKloetzelBuchLocalService() {
		return kloetzelBuchLocalService;
	}

	/**
	 * Sets the kloetzel buch local service.
	 *
	 * @param kloetzelBuchLocalService the kloetzel buch local service
	 */
	public void setKloetzelBuchLocalService(
		at.graz.meduni.bibbox.medicaldataset.service.KloetzelBuchLocalService kloetzelBuchLocalService) {
		this.kloetzelBuchLocalService = kloetzelBuchLocalService;
	}

	/**
	 * Returns the kloetzel buch persistence.
	 *
	 * @return the kloetzel buch persistence
	 */
	public KloetzelBuchPersistence getKloetzelBuchPersistence() {
		return kloetzelBuchPersistence;
	}

	/**
	 * Sets the kloetzel buch persistence.
	 *
	 * @param kloetzelBuchPersistence the kloetzel buch persistence
	 */
	public void setKloetzelBuchPersistence(
		KloetzelBuchPersistence kloetzelBuchPersistence) {
		this.kloetzelBuchPersistence = kloetzelBuchPersistence;
	}

	/**
	 * Returns the medical record local service.
	 *
	 * @return the medical record local service
	 */
	public MedicalRecordLocalService getMedicalRecordLocalService() {
		return medicalRecordLocalService;
	}

	/**
	 * Sets the medical record local service.
	 *
	 * @param medicalRecordLocalService the medical record local service
	 */
	public void setMedicalRecordLocalService(
		MedicalRecordLocalService medicalRecordLocalService) {
		this.medicalRecordLocalService = medicalRecordLocalService;
	}

	/**
	 * Returns the medical record persistence.
	 *
	 * @return the medical record persistence
	 */
	public MedicalRecordPersistence getMedicalRecordPersistence() {
		return medicalRecordPersistence;
	}

	/**
	 * Sets the medical record persistence.
	 *
	 * @param medicalRecordPersistence the medical record persistence
	 */
	public void setMedicalRecordPersistence(
		MedicalRecordPersistence medicalRecordPersistence) {
		this.medicalRecordPersistence = medicalRecordPersistence;
	}

	/**
	 * Returns the pathology data local service.
	 *
	 * @return the pathology data local service
	 */
	public at.graz.meduni.bibbox.medicaldataset.service.PathologyDataLocalService getPathologyDataLocalService() {
		return pathologyDataLocalService;
	}

	/**
	 * Sets the pathology data local service.
	 *
	 * @param pathologyDataLocalService the pathology data local service
	 */
	public void setPathologyDataLocalService(
		at.graz.meduni.bibbox.medicaldataset.service.PathologyDataLocalService pathologyDataLocalService) {
		this.pathologyDataLocalService = pathologyDataLocalService;
	}

	/**
	 * Returns the pathology data persistence.
	 *
	 * @return the pathology data persistence
	 */
	public PathologyDataPersistence getPathologyDataPersistence() {
		return pathologyDataPersistence;
	}

	/**
	 * Sets the pathology data persistence.
	 *
	 * @param pathologyDataPersistence the pathology data persistence
	 */
	public void setPathologyDataPersistence(
		PathologyDataPersistence pathologyDataPersistence) {
		this.pathologyDataPersistence = pathologyDataPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the asset entry local service.
	 *
	 * @return the asset entry local service
	 */
	public com.liferay.asset.kernel.service.AssetEntryLocalService getAssetEntryLocalService() {
		return assetEntryLocalService;
	}

	/**
	 * Sets the asset entry local service.
	 *
	 * @param assetEntryLocalService the asset entry local service
	 */
	public void setAssetEntryLocalService(
		com.liferay.asset.kernel.service.AssetEntryLocalService assetEntryLocalService) {
		this.assetEntryLocalService = assetEntryLocalService;
	}

	/**
	 * Returns the asset entry persistence.
	 *
	 * @return the asset entry persistence
	 */
	public AssetEntryPersistence getAssetEntryPersistence() {
		return assetEntryPersistence;
	}

	/**
	 * Sets the asset entry persistence.
	 *
	 * @param assetEntryPersistence the asset entry persistence
	 */
	public void setAssetEntryPersistence(
		AssetEntryPersistence assetEntryPersistence) {
		this.assetEntryPersistence = assetEntryPersistence;
	}

	/**
	 * Returns the asset tag local service.
	 *
	 * @return the asset tag local service
	 */
	public com.liferay.asset.kernel.service.AssetTagLocalService getAssetTagLocalService() {
		return assetTagLocalService;
	}

	/**
	 * Sets the asset tag local service.
	 *
	 * @param assetTagLocalService the asset tag local service
	 */
	public void setAssetTagLocalService(
		com.liferay.asset.kernel.service.AssetTagLocalService assetTagLocalService) {
		this.assetTagLocalService = assetTagLocalService;
	}

	/**
	 * Returns the asset tag persistence.
	 *
	 * @return the asset tag persistence
	 */
	public AssetTagPersistence getAssetTagPersistence() {
		return assetTagPersistence;
	}

	/**
	 * Sets the asset tag persistence.
	 *
	 * @param assetTagPersistence the asset tag persistence
	 */
	public void setAssetTagPersistence(AssetTagPersistence assetTagPersistence) {
		this.assetTagPersistence = assetTagPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("at.graz.meduni.bibbox.medicaldataset.model.MedicalRecord",
			medicalRecordLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"at.graz.meduni.bibbox.medicaldataset.model.MedicalRecord");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return MedicalRecordLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return MedicalRecord.class;
	}

	protected String getModelClassName() {
		return MedicalRecord.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = medicalRecordPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetLocalService.class)
	protected at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetLocalService importMedicalDataSetLocalService;
	@BeanReference(type = ImportMedicalDataSetPersistence.class)
	protected ImportMedicalDataSetPersistence importMedicalDataSetPersistence;
	@BeanReference(type = at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetFieldMapLocalService.class)
	protected at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetFieldMapLocalService importMedicalDataSetFieldMapLocalService;
	@BeanReference(type = ImportMedicalDataSetFieldMapPersistence.class)
	protected ImportMedicalDataSetFieldMapPersistence importMedicalDataSetFieldMapPersistence;
	@BeanReference(type = at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetLogLocalService.class)
	protected at.graz.meduni.bibbox.medicaldataset.service.ImportMedicalDataSetLogLocalService importMedicalDataSetLogLocalService;
	@BeanReference(type = ImportMedicalDataSetLogPersistence.class)
	protected ImportMedicalDataSetLogPersistence importMedicalDataSetLogPersistence;
	@BeanReference(type = at.graz.meduni.bibbox.medicaldataset.service.KloetzelBuchLocalService.class)
	protected at.graz.meduni.bibbox.medicaldataset.service.KloetzelBuchLocalService kloetzelBuchLocalService;
	@BeanReference(type = KloetzelBuchPersistence.class)
	protected KloetzelBuchPersistence kloetzelBuchPersistence;
	@BeanReference(type = MedicalRecordLocalService.class)
	protected MedicalRecordLocalService medicalRecordLocalService;
	@BeanReference(type = MedicalRecordPersistence.class)
	protected MedicalRecordPersistence medicalRecordPersistence;
	@BeanReference(type = at.graz.meduni.bibbox.medicaldataset.service.PathologyDataLocalService.class)
	protected at.graz.meduni.bibbox.medicaldataset.service.PathologyDataLocalService pathologyDataLocalService;
	@BeanReference(type = PathologyDataPersistence.class)
	protected PathologyDataPersistence pathologyDataPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = com.liferay.asset.kernel.service.AssetEntryLocalService.class)
	protected com.liferay.asset.kernel.service.AssetEntryLocalService assetEntryLocalService;
	@ServiceReference(type = AssetEntryPersistence.class)
	protected AssetEntryPersistence assetEntryPersistence;
	@ServiceReference(type = com.liferay.asset.kernel.service.AssetTagLocalService.class)
	protected com.liferay.asset.kernel.service.AssetTagLocalService assetTagLocalService;
	@ServiceReference(type = AssetTagPersistence.class)
	protected AssetTagPersistence assetTagPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}