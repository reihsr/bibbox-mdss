/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.bibbox.medicaldataset.model.impl;

import aQute.bnd.annotation.ProviderType;

import at.graz.meduni.bibbox.medicaldataset.model.PathologieData;
import at.graz.meduni.bibbox.medicaldataset.model.PathologieDataModel;
import at.graz.meduni.bibbox.medicaldataset.model.PathologieDataSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PathologieData service. Represents a row in the &quot;FOO_PathologieData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PathologieDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PathologieDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PathologieDataImpl
 * @see PathologieData
 * @see PathologieDataModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PathologieDataModelImpl extends BaseModelImpl<PathologieData>
	implements PathologieDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pathologie data model instance should use the {@link PathologieData} interface instead.
	 */
	public static final String TABLE_NAME = "FOO_PathologieData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "pathologieDataId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "medicalRecordId", Types.BIGINT },
			{ "receivedDate", Types.TIMESTAMP },
			{ "validationDate", Types.TIMESTAMP },
			{ "patientAge", Types.INTEGER },
			{ "sender", Types.VARCHAR },
			{ "extractionMethode", Types.VARCHAR },
			{ "reportingPhysician1", Types.VARCHAR },
			{ "reportingPhysician2", Types.VARCHAR },
			{ "gynPhysician", Types.VARCHAR },
			{ "validationPhysician1", Types.VARCHAR },
			{ "validationPhysician2", Types.VARCHAR },
			{ "reportStatus", Types.VARCHAR },
			{ "numberOfBlockes", Types.INTEGER },
			{ "numberOfSlides", Types.INTEGER },
			{ "basicDisease", Types.VARCHAR },
			{ "causeOfDeath", Types.VARCHAR },
			{ "material", Types.VARCHAR },
			{ "materialExtended", Types.VARCHAR },
			{ "macroscopicDescription", Types.VARCHAR },
			{ "microscopicDescription", Types.VARCHAR },
			{ "histologicDescription", Types.VARCHAR },
			{ "molecularPathologicDescription", Types.VARCHAR },
			{ "zytologieDescription", Types.VARCHAR },
			{ "pathologicDiagnosis", Types.VARCHAR },
			{ "frozenSectionDiagnosis", Types.VARCHAR },
			{ "molecularPathologicDiagnosis", Types.VARCHAR },
			{ "zytologieDiagnosis", Types.VARCHAR },
			{ "neuroPathologicDiagnosis", Types.VARCHAR },
			{ "comment_", Types.VARCHAR },
			{ "zytologiecomment", Types.VARCHAR },
			{ "grad", Types.VARCHAR },
			{ "tnmp", Types.VARCHAR },
			{ "tnmt", Types.VARCHAR },
			{ "tnmn", Types.VARCHAR },
			{ "tnmm", Types.VARCHAR },
			{ "tnmr", Types.VARCHAR },
			{ "tnml", Types.VARCHAR },
			{ "tnmv", Types.VARCHAR },
			{ "tnmpn", Types.VARCHAR },
			{ "dgcode1", Types.VARCHAR },
			{ "dgcode2", Types.VARCHAR },
			{ "pap", Types.VARCHAR },
			{ "smearQuality", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pathologieDataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("medicalRecordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("receivedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("validationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("patientAge", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("extractionMethode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reportingPhysician1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reportingPhysician2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gynPhysician", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validationPhysician1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validationPhysician2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reportStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfBlockes", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("numberOfSlides", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("basicDisease", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("causeOfDeath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("material", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("materialExtended", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("macroscopicDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("microscopicDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("histologicDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("molecularPathologicDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zytologieDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pathologicDiagnosis", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("frozenSectionDiagnosis", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("molecularPathologicDiagnosis", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zytologieDiagnosis", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("neuroPathologicDiagnosis", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zytologiecomment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("grad", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tnmp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tnmt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tnmn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tnmm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tnmr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tnml", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tnmv", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tnmpn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dgcode1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dgcode2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pap", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("smearQuality", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table FOO_PathologieData (uuid_ VARCHAR(75) null,pathologieDataId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,medicalRecordId LONG,receivedDate DATE null,validationDate DATE null,patientAge INTEGER,sender VARCHAR(75) null,extractionMethode VARCHAR(75) null,reportingPhysician1 VARCHAR(75) null,reportingPhysician2 VARCHAR(75) null,gynPhysician VARCHAR(75) null,validationPhysician1 VARCHAR(75) null,validationPhysician2 VARCHAR(75) null,reportStatus VARCHAR(75) null,numberOfBlockes INTEGER,numberOfSlides INTEGER,basicDisease VARCHAR(75) null,causeOfDeath VARCHAR(75) null,material VARCHAR(75) null,materialExtended VARCHAR(75) null,macroscopicDescription STRING null,microscopicDescription STRING null,histologicDescription STRING null,molecularPathologicDescription STRING null,zytologieDescription STRING null,pathologicDiagnosis STRING null,frozenSectionDiagnosis STRING null,molecularPathologicDiagnosis STRING null,zytologieDiagnosis STRING null,neuroPathologicDiagnosis STRING null,comment_ STRING null,zytologiecomment STRING null,grad VARCHAR(75) null,tnmp VARCHAR(75) null,tnmt VARCHAR(75) null,tnmn VARCHAR(75) null,tnmm VARCHAR(75) null,tnmr VARCHAR(75) null,tnml VARCHAR(75) null,tnmv VARCHAR(75) null,tnmpn VARCHAR(75) null,dgcode1 VARCHAR(75) null,dgcode2 VARCHAR(75) null,pap VARCHAR(75) null,smearQuality VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table FOO_PathologieData";
	public static final String ORDER_BY_JPQL = " ORDER BY pathologieData.pathologieDataId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FOO_PathologieData.pathologieDataId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(at.graz.meduni.bibbox.medicaldataset.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.bibbox.medicaldataset.model.PathologieData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(at.graz.meduni.bibbox.medicaldataset.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.bibbox.medicaldataset.model.PathologieData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(at.graz.meduni.bibbox.medicaldataset.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.bibbox.medicaldataset.model.PathologieData"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long MATERIAL_COLUMN_BITMASK = 4L;
	public static final long MEDICALRECORDID_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long PATHOLOGIEDATAID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PathologieData toModel(PathologieDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PathologieData model = new PathologieDataImpl();

		model.setUuid(soapModel.getUuid());
		model.setPathologieDataId(soapModel.getPathologieDataId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setMedicalRecordId(soapModel.getMedicalRecordId());
		model.setReceivedDate(soapModel.getReceivedDate());
		model.setValidationDate(soapModel.getValidationDate());
		model.setPatientAge(soapModel.getPatientAge());
		model.setSender(soapModel.getSender());
		model.setExtractionMethode(soapModel.getExtractionMethode());
		model.setReportingPhysician1(soapModel.getReportingPhysician1());
		model.setReportingPhysician2(soapModel.getReportingPhysician2());
		model.setGynPhysician(soapModel.getGynPhysician());
		model.setValidationPhysician1(soapModel.getValidationPhysician1());
		model.setValidationPhysician2(soapModel.getValidationPhysician2());
		model.setReportStatus(soapModel.getReportStatus());
		model.setNumberOfBlockes(soapModel.getNumberOfBlockes());
		model.setNumberOfSlides(soapModel.getNumberOfSlides());
		model.setBasicDisease(soapModel.getBasicDisease());
		model.setCauseOfDeath(soapModel.getCauseOfDeath());
		model.setMaterial(soapModel.getMaterial());
		model.setMaterialExtended(soapModel.getMaterialExtended());
		model.setMacroscopicDescription(soapModel.getMacroscopicDescription());
		model.setMicroscopicDescription(soapModel.getMicroscopicDescription());
		model.setHistologicDescription(soapModel.getHistologicDescription());
		model.setMolecularPathologicDescription(soapModel.getMolecularPathologicDescription());
		model.setZytologieDescription(soapModel.getZytologieDescription());
		model.setPathologicDiagnosis(soapModel.getPathologicDiagnosis());
		model.setFrozenSectionDiagnosis(soapModel.getFrozenSectionDiagnosis());
		model.setMolecularPathologicDiagnosis(soapModel.getMolecularPathologicDiagnosis());
		model.setZytologieDiagnosis(soapModel.getZytologieDiagnosis());
		model.setNeuroPathologicDiagnosis(soapModel.getNeuroPathologicDiagnosis());
		model.setComment(soapModel.getComment());
		model.setZytologiecomment(soapModel.getZytologiecomment());
		model.setGrad(soapModel.getGrad());
		model.setTnmp(soapModel.getTnmp());
		model.setTnmt(soapModel.getTnmt());
		model.setTnmn(soapModel.getTnmn());
		model.setTnmm(soapModel.getTnmm());
		model.setTnmr(soapModel.getTnmr());
		model.setTnml(soapModel.getTnml());
		model.setTnmv(soapModel.getTnmv());
		model.setTnmpn(soapModel.getTnmpn());
		model.setDgcode1(soapModel.getDgcode1());
		model.setDgcode2(soapModel.getDgcode2());
		model.setPap(soapModel.getPap());
		model.setSmearQuality(soapModel.getSmearQuality());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PathologieData> toModels(PathologieDataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PathologieData> models = new ArrayList<PathologieData>(soapModels.length);

		for (PathologieDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(at.graz.meduni.bibbox.medicaldataset.service.util.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.bibbox.medicaldataset.model.PathologieData"));

	public PathologieDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pathologieDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPathologieDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pathologieDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PathologieData.class;
	}

	@Override
	public String getModelClassName() {
		return PathologieData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("pathologieDataId", getPathologieDataId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("medicalRecordId", getMedicalRecordId());
		attributes.put("receivedDate", getReceivedDate());
		attributes.put("validationDate", getValidationDate());
		attributes.put("patientAge", getPatientAge());
		attributes.put("sender", getSender());
		attributes.put("extractionMethode", getExtractionMethode());
		attributes.put("reportingPhysician1", getReportingPhysician1());
		attributes.put("reportingPhysician2", getReportingPhysician2());
		attributes.put("gynPhysician", getGynPhysician());
		attributes.put("validationPhysician1", getValidationPhysician1());
		attributes.put("validationPhysician2", getValidationPhysician2());
		attributes.put("reportStatus", getReportStatus());
		attributes.put("numberOfBlockes", getNumberOfBlockes());
		attributes.put("numberOfSlides", getNumberOfSlides());
		attributes.put("basicDisease", getBasicDisease());
		attributes.put("causeOfDeath", getCauseOfDeath());
		attributes.put("material", getMaterial());
		attributes.put("materialExtended", getMaterialExtended());
		attributes.put("macroscopicDescription", getMacroscopicDescription());
		attributes.put("microscopicDescription", getMicroscopicDescription());
		attributes.put("histologicDescription", getHistologicDescription());
		attributes.put("molecularPathologicDescription",
			getMolecularPathologicDescription());
		attributes.put("zytologieDescription", getZytologieDescription());
		attributes.put("pathologicDiagnosis", getPathologicDiagnosis());
		attributes.put("frozenSectionDiagnosis", getFrozenSectionDiagnosis());
		attributes.put("molecularPathologicDiagnosis",
			getMolecularPathologicDiagnosis());
		attributes.put("zytologieDiagnosis", getZytologieDiagnosis());
		attributes.put("neuroPathologicDiagnosis", getNeuroPathologicDiagnosis());
		attributes.put("comment", getComment());
		attributes.put("zytologiecomment", getZytologiecomment());
		attributes.put("grad", getGrad());
		attributes.put("tnmp", getTnmp());
		attributes.put("tnmt", getTnmt());
		attributes.put("tnmn", getTnmn());
		attributes.put("tnmm", getTnmm());
		attributes.put("tnmr", getTnmr());
		attributes.put("tnml", getTnml());
		attributes.put("tnmv", getTnmv());
		attributes.put("tnmpn", getTnmpn());
		attributes.put("dgcode1", getDgcode1());
		attributes.put("dgcode2", getDgcode2());
		attributes.put("pap", getPap());
		attributes.put("smearQuality", getSmearQuality());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long pathologieDataId = (Long)attributes.get("pathologieDataId");

		if (pathologieDataId != null) {
			setPathologieDataId(pathologieDataId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Long medicalRecordId = (Long)attributes.get("medicalRecordId");

		if (medicalRecordId != null) {
			setMedicalRecordId(medicalRecordId);
		}

		Date receivedDate = (Date)attributes.get("receivedDate");

		if (receivedDate != null) {
			setReceivedDate(receivedDate);
		}

		Date validationDate = (Date)attributes.get("validationDate");

		if (validationDate != null) {
			setValidationDate(validationDate);
		}

		Integer patientAge = (Integer)attributes.get("patientAge");

		if (patientAge != null) {
			setPatientAge(patientAge);
		}

		String sender = (String)attributes.get("sender");

		if (sender != null) {
			setSender(sender);
		}

		String extractionMethode = (String)attributes.get("extractionMethode");

		if (extractionMethode != null) {
			setExtractionMethode(extractionMethode);
		}

		String reportingPhysician1 = (String)attributes.get(
				"reportingPhysician1");

		if (reportingPhysician1 != null) {
			setReportingPhysician1(reportingPhysician1);
		}

		String reportingPhysician2 = (String)attributes.get(
				"reportingPhysician2");

		if (reportingPhysician2 != null) {
			setReportingPhysician2(reportingPhysician2);
		}

		String gynPhysician = (String)attributes.get("gynPhysician");

		if (gynPhysician != null) {
			setGynPhysician(gynPhysician);
		}

		String validationPhysician1 = (String)attributes.get(
				"validationPhysician1");

		if (validationPhysician1 != null) {
			setValidationPhysician1(validationPhysician1);
		}

		String validationPhysician2 = (String)attributes.get(
				"validationPhysician2");

		if (validationPhysician2 != null) {
			setValidationPhysician2(validationPhysician2);
		}

		String reportStatus = (String)attributes.get("reportStatus");

		if (reportStatus != null) {
			setReportStatus(reportStatus);
		}

		Integer numberOfBlockes = (Integer)attributes.get("numberOfBlockes");

		if (numberOfBlockes != null) {
			setNumberOfBlockes(numberOfBlockes);
		}

		Integer numberOfSlides = (Integer)attributes.get("numberOfSlides");

		if (numberOfSlides != null) {
			setNumberOfSlides(numberOfSlides);
		}

		String basicDisease = (String)attributes.get("basicDisease");

		if (basicDisease != null) {
			setBasicDisease(basicDisease);
		}

		String causeOfDeath = (String)attributes.get("causeOfDeath");

		if (causeOfDeath != null) {
			setCauseOfDeath(causeOfDeath);
		}

		String material = (String)attributes.get("material");

		if (material != null) {
			setMaterial(material);
		}

		String materialExtended = (String)attributes.get("materialExtended");

		if (materialExtended != null) {
			setMaterialExtended(materialExtended);
		}

		String macroscopicDescription = (String)attributes.get(
				"macroscopicDescription");

		if (macroscopicDescription != null) {
			setMacroscopicDescription(macroscopicDescription);
		}

		String microscopicDescription = (String)attributes.get(
				"microscopicDescription");

		if (microscopicDescription != null) {
			setMicroscopicDescription(microscopicDescription);
		}

		String histologicDescription = (String)attributes.get(
				"histologicDescription");

		if (histologicDescription != null) {
			setHistologicDescription(histologicDescription);
		}

		String molecularPathologicDescription = (String)attributes.get(
				"molecularPathologicDescription");

		if (molecularPathologicDescription != null) {
			setMolecularPathologicDescription(molecularPathologicDescription);
		}

		String zytologieDescription = (String)attributes.get(
				"zytologieDescription");

		if (zytologieDescription != null) {
			setZytologieDescription(zytologieDescription);
		}

		String pathologicDiagnosis = (String)attributes.get(
				"pathologicDiagnosis");

		if (pathologicDiagnosis != null) {
			setPathologicDiagnosis(pathologicDiagnosis);
		}

		String frozenSectionDiagnosis = (String)attributes.get(
				"frozenSectionDiagnosis");

		if (frozenSectionDiagnosis != null) {
			setFrozenSectionDiagnosis(frozenSectionDiagnosis);
		}

		String molecularPathologicDiagnosis = (String)attributes.get(
				"molecularPathologicDiagnosis");

		if (molecularPathologicDiagnosis != null) {
			setMolecularPathologicDiagnosis(molecularPathologicDiagnosis);
		}

		String zytologieDiagnosis = (String)attributes.get("zytologieDiagnosis");

		if (zytologieDiagnosis != null) {
			setZytologieDiagnosis(zytologieDiagnosis);
		}

		String neuroPathologicDiagnosis = (String)attributes.get(
				"neuroPathologicDiagnosis");

		if (neuroPathologicDiagnosis != null) {
			setNeuroPathologicDiagnosis(neuroPathologicDiagnosis);
		}

		String comment = (String)attributes.get("comment");

		if (comment != null) {
			setComment(comment);
		}

		String zytologiecomment = (String)attributes.get("zytologiecomment");

		if (zytologiecomment != null) {
			setZytologiecomment(zytologiecomment);
		}

		String grad = (String)attributes.get("grad");

		if (grad != null) {
			setGrad(grad);
		}

		String tnmp = (String)attributes.get("tnmp");

		if (tnmp != null) {
			setTnmp(tnmp);
		}

		String tnmt = (String)attributes.get("tnmt");

		if (tnmt != null) {
			setTnmt(tnmt);
		}

		String tnmn = (String)attributes.get("tnmn");

		if (tnmn != null) {
			setTnmn(tnmn);
		}

		String tnmm = (String)attributes.get("tnmm");

		if (tnmm != null) {
			setTnmm(tnmm);
		}

		String tnmr = (String)attributes.get("tnmr");

		if (tnmr != null) {
			setTnmr(tnmr);
		}

		String tnml = (String)attributes.get("tnml");

		if (tnml != null) {
			setTnml(tnml);
		}

		String tnmv = (String)attributes.get("tnmv");

		if (tnmv != null) {
			setTnmv(tnmv);
		}

		String tnmpn = (String)attributes.get("tnmpn");

		if (tnmpn != null) {
			setTnmpn(tnmpn);
		}

		String dgcode1 = (String)attributes.get("dgcode1");

		if (dgcode1 != null) {
			setDgcode1(dgcode1);
		}

		String dgcode2 = (String)attributes.get("dgcode2");

		if (dgcode2 != null) {
			setDgcode2(dgcode2);
		}

		String pap = (String)attributes.get("pap");

		if (pap != null) {
			setPap(pap);
		}

		String smearQuality = (String)attributes.get("smearQuality");

		if (smearQuality != null) {
			setSmearQuality(smearQuality);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPathologieDataId() {
		return _pathologieDataId;
	}

	@Override
	public void setPathologieDataId(long pathologieDataId) {
		_columnBitmask = -1L;

		_pathologieDataId = pathologieDataId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getMedicalRecordId() {
		return _medicalRecordId;
	}

	@Override
	public void setMedicalRecordId(long medicalRecordId) {
		_columnBitmask |= MEDICALRECORDID_COLUMN_BITMASK;

		if (!_setOriginalMedicalRecordId) {
			_setOriginalMedicalRecordId = true;

			_originalMedicalRecordId = _medicalRecordId;
		}

		_medicalRecordId = medicalRecordId;
	}

	public long getOriginalMedicalRecordId() {
		return _originalMedicalRecordId;
	}

	@JSON
	@Override
	public Date getReceivedDate() {
		return _receivedDate;
	}

	@Override
	public void setReceivedDate(Date receivedDate) {
		_receivedDate = receivedDate;
	}

	@JSON
	@Override
	public Date getValidationDate() {
		return _validationDate;
	}

	@Override
	public void setValidationDate(Date validationDate) {
		_validationDate = validationDate;
	}

	@JSON
	@Override
	public int getPatientAge() {
		return _patientAge;
	}

	@Override
	public void setPatientAge(int patientAge) {
		_patientAge = patientAge;
	}

	@JSON
	@Override
	public String getSender() {
		if (_sender == null) {
			return StringPool.BLANK;
		}
		else {
			return _sender;
		}
	}

	@Override
	public void setSender(String sender) {
		_sender = sender;
	}

	@JSON
	@Override
	public String getExtractionMethode() {
		if (_extractionMethode == null) {
			return StringPool.BLANK;
		}
		else {
			return _extractionMethode;
		}
	}

	@Override
	public void setExtractionMethode(String extractionMethode) {
		_extractionMethode = extractionMethode;
	}

	@JSON
	@Override
	public String getReportingPhysician1() {
		if (_reportingPhysician1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportingPhysician1;
		}
	}

	@Override
	public void setReportingPhysician1(String reportingPhysician1) {
		_reportingPhysician1 = reportingPhysician1;
	}

	@JSON
	@Override
	public String getReportingPhysician2() {
		if (_reportingPhysician2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportingPhysician2;
		}
	}

	@Override
	public void setReportingPhysician2(String reportingPhysician2) {
		_reportingPhysician2 = reportingPhysician2;
	}

	@JSON
	@Override
	public String getGynPhysician() {
		if (_gynPhysician == null) {
			return StringPool.BLANK;
		}
		else {
			return _gynPhysician;
		}
	}

	@Override
	public void setGynPhysician(String gynPhysician) {
		_gynPhysician = gynPhysician;
	}

	@JSON
	@Override
	public String getValidationPhysician1() {
		if (_validationPhysician1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _validationPhysician1;
		}
	}

	@Override
	public void setValidationPhysician1(String validationPhysician1) {
		_validationPhysician1 = validationPhysician1;
	}

	@JSON
	@Override
	public String getValidationPhysician2() {
		if (_validationPhysician2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _validationPhysician2;
		}
	}

	@Override
	public void setValidationPhysician2(String validationPhysician2) {
		_validationPhysician2 = validationPhysician2;
	}

	@JSON
	@Override
	public String getReportStatus() {
		if (_reportStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportStatus;
		}
	}

	@Override
	public void setReportStatus(String reportStatus) {
		_reportStatus = reportStatus;
	}

	@JSON
	@Override
	public int getNumberOfBlockes() {
		return _numberOfBlockes;
	}

	@Override
	public void setNumberOfBlockes(int numberOfBlockes) {
		_numberOfBlockes = numberOfBlockes;
	}

	@JSON
	@Override
	public int getNumberOfSlides() {
		return _numberOfSlides;
	}

	@Override
	public void setNumberOfSlides(int numberOfSlides) {
		_numberOfSlides = numberOfSlides;
	}

	@JSON
	@Override
	public String getBasicDisease() {
		if (_basicDisease == null) {
			return StringPool.BLANK;
		}
		else {
			return _basicDisease;
		}
	}

	@Override
	public void setBasicDisease(String basicDisease) {
		_basicDisease = basicDisease;
	}

	@JSON
	@Override
	public String getCauseOfDeath() {
		if (_causeOfDeath == null) {
			return StringPool.BLANK;
		}
		else {
			return _causeOfDeath;
		}
	}

	@Override
	public void setCauseOfDeath(String causeOfDeath) {
		_causeOfDeath = causeOfDeath;
	}

	@JSON
	@Override
	public String getMaterial() {
		if (_material == null) {
			return StringPool.BLANK;
		}
		else {
			return _material;
		}
	}

	@Override
	public void setMaterial(String material) {
		_columnBitmask |= MATERIAL_COLUMN_BITMASK;

		if (_originalMaterial == null) {
			_originalMaterial = _material;
		}

		_material = material;
	}

	public String getOriginalMaterial() {
		return GetterUtil.getString(_originalMaterial);
	}

	@JSON
	@Override
	public String getMaterialExtended() {
		if (_materialExtended == null) {
			return StringPool.BLANK;
		}
		else {
			return _materialExtended;
		}
	}

	@Override
	public void setMaterialExtended(String materialExtended) {
		_materialExtended = materialExtended;
	}

	@JSON
	@Override
	public String getMacroscopicDescription() {
		if (_macroscopicDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _macroscopicDescription;
		}
	}

	@Override
	public void setMacroscopicDescription(String macroscopicDescription) {
		_macroscopicDescription = macroscopicDescription;
	}

	@JSON
	@Override
	public String getMicroscopicDescription() {
		if (_microscopicDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _microscopicDescription;
		}
	}

	@Override
	public void setMicroscopicDescription(String microscopicDescription) {
		_microscopicDescription = microscopicDescription;
	}

	@JSON
	@Override
	public String getHistologicDescription() {
		if (_histologicDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _histologicDescription;
		}
	}

	@Override
	public void setHistologicDescription(String histologicDescription) {
		_histologicDescription = histologicDescription;
	}

	@JSON
	@Override
	public String getMolecularPathologicDescription() {
		if (_molecularPathologicDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _molecularPathologicDescription;
		}
	}

	@Override
	public void setMolecularPathologicDescription(
		String molecularPathologicDescription) {
		_molecularPathologicDescription = molecularPathologicDescription;
	}

	@JSON
	@Override
	public String getZytologieDescription() {
		if (_zytologieDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _zytologieDescription;
		}
	}

	@Override
	public void setZytologieDescription(String zytologieDescription) {
		_zytologieDescription = zytologieDescription;
	}

	@JSON
	@Override
	public String getPathologicDiagnosis() {
		if (_pathologicDiagnosis == null) {
			return StringPool.BLANK;
		}
		else {
			return _pathologicDiagnosis;
		}
	}

	@Override
	public void setPathologicDiagnosis(String pathologicDiagnosis) {
		_pathologicDiagnosis = pathologicDiagnosis;
	}

	@JSON
	@Override
	public String getFrozenSectionDiagnosis() {
		if (_frozenSectionDiagnosis == null) {
			return StringPool.BLANK;
		}
		else {
			return _frozenSectionDiagnosis;
		}
	}

	@Override
	public void setFrozenSectionDiagnosis(String frozenSectionDiagnosis) {
		_frozenSectionDiagnosis = frozenSectionDiagnosis;
	}

	@JSON
	@Override
	public String getMolecularPathologicDiagnosis() {
		if (_molecularPathologicDiagnosis == null) {
			return StringPool.BLANK;
		}
		else {
			return _molecularPathologicDiagnosis;
		}
	}

	@Override
	public void setMolecularPathologicDiagnosis(
		String molecularPathologicDiagnosis) {
		_molecularPathologicDiagnosis = molecularPathologicDiagnosis;
	}

	@JSON
	@Override
	public String getZytologieDiagnosis() {
		if (_zytologieDiagnosis == null) {
			return StringPool.BLANK;
		}
		else {
			return _zytologieDiagnosis;
		}
	}

	@Override
	public void setZytologieDiagnosis(String zytologieDiagnosis) {
		_zytologieDiagnosis = zytologieDiagnosis;
	}

	@JSON
	@Override
	public String getNeuroPathologicDiagnosis() {
		if (_neuroPathologicDiagnosis == null) {
			return StringPool.BLANK;
		}
		else {
			return _neuroPathologicDiagnosis;
		}
	}

	@Override
	public void setNeuroPathologicDiagnosis(String neuroPathologicDiagnosis) {
		_neuroPathologicDiagnosis = neuroPathologicDiagnosis;
	}

	@JSON
	@Override
	public String getComment() {
		if (_comment == null) {
			return StringPool.BLANK;
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	@JSON
	@Override
	public String getZytologiecomment() {
		if (_zytologiecomment == null) {
			return StringPool.BLANK;
		}
		else {
			return _zytologiecomment;
		}
	}

	@Override
	public void setZytologiecomment(String zytologiecomment) {
		_zytologiecomment = zytologiecomment;
	}

	@JSON
	@Override
	public String getGrad() {
		if (_grad == null) {
			return StringPool.BLANK;
		}
		else {
			return _grad;
		}
	}

	@Override
	public void setGrad(String grad) {
		_grad = grad;
	}

	@JSON
	@Override
	public String getTnmp() {
		if (_tnmp == null) {
			return StringPool.BLANK;
		}
		else {
			return _tnmp;
		}
	}

	@Override
	public void setTnmp(String tnmp) {
		_tnmp = tnmp;
	}

	@JSON
	@Override
	public String getTnmt() {
		if (_tnmt == null) {
			return StringPool.BLANK;
		}
		else {
			return _tnmt;
		}
	}

	@Override
	public void setTnmt(String tnmt) {
		_tnmt = tnmt;
	}

	@JSON
	@Override
	public String getTnmn() {
		if (_tnmn == null) {
			return StringPool.BLANK;
		}
		else {
			return _tnmn;
		}
	}

	@Override
	public void setTnmn(String tnmn) {
		_tnmn = tnmn;
	}

	@JSON
	@Override
	public String getTnmm() {
		if (_tnmm == null) {
			return StringPool.BLANK;
		}
		else {
			return _tnmm;
		}
	}

	@Override
	public void setTnmm(String tnmm) {
		_tnmm = tnmm;
	}

	@JSON
	@Override
	public String getTnmr() {
		if (_tnmr == null) {
			return StringPool.BLANK;
		}
		else {
			return _tnmr;
		}
	}

	@Override
	public void setTnmr(String tnmr) {
		_tnmr = tnmr;
	}

	@JSON
	@Override
	public String getTnml() {
		if (_tnml == null) {
			return StringPool.BLANK;
		}
		else {
			return _tnml;
		}
	}

	@Override
	public void setTnml(String tnml) {
		_tnml = tnml;
	}

	@JSON
	@Override
	public String getTnmv() {
		if (_tnmv == null) {
			return StringPool.BLANK;
		}
		else {
			return _tnmv;
		}
	}

	@Override
	public void setTnmv(String tnmv) {
		_tnmv = tnmv;
	}

	@JSON
	@Override
	public String getTnmpn() {
		if (_tnmpn == null) {
			return StringPool.BLANK;
		}
		else {
			return _tnmpn;
		}
	}

	@Override
	public void setTnmpn(String tnmpn) {
		_tnmpn = tnmpn;
	}

	@JSON
	@Override
	public String getDgcode1() {
		if (_dgcode1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _dgcode1;
		}
	}

	@Override
	public void setDgcode1(String dgcode1) {
		_dgcode1 = dgcode1;
	}

	@JSON
	@Override
	public String getDgcode2() {
		if (_dgcode2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _dgcode2;
		}
	}

	@Override
	public void setDgcode2(String dgcode2) {
		_dgcode2 = dgcode2;
	}

	@JSON
	@Override
	public String getPap() {
		if (_pap == null) {
			return StringPool.BLANK;
		}
		else {
			return _pap;
		}
	}

	@Override
	public void setPap(String pap) {
		_pap = pap;
	}

	@JSON
	@Override
	public String getSmearQuality() {
		if (_smearQuality == null) {
			return StringPool.BLANK;
		}
		else {
			return _smearQuality;
		}
	}

	@Override
	public void setSmearQuality(String smearQuality) {
		_smearQuality = smearQuality;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				PathologieData.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PathologieData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PathologieData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PathologieData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PathologieDataImpl pathologieDataImpl = new PathologieDataImpl();

		pathologieDataImpl.setUuid(getUuid());
		pathologieDataImpl.setPathologieDataId(getPathologieDataId());
		pathologieDataImpl.setGroupId(getGroupId());
		pathologieDataImpl.setCompanyId(getCompanyId());
		pathologieDataImpl.setUserId(getUserId());
		pathologieDataImpl.setUserName(getUserName());
		pathologieDataImpl.setCreateDate(getCreateDate());
		pathologieDataImpl.setModifiedDate(getModifiedDate());
		pathologieDataImpl.setStatus(getStatus());
		pathologieDataImpl.setStatusByUserId(getStatusByUserId());
		pathologieDataImpl.setStatusByUserName(getStatusByUserName());
		pathologieDataImpl.setStatusDate(getStatusDate());
		pathologieDataImpl.setMedicalRecordId(getMedicalRecordId());
		pathologieDataImpl.setReceivedDate(getReceivedDate());
		pathologieDataImpl.setValidationDate(getValidationDate());
		pathologieDataImpl.setPatientAge(getPatientAge());
		pathologieDataImpl.setSender(getSender());
		pathologieDataImpl.setExtractionMethode(getExtractionMethode());
		pathologieDataImpl.setReportingPhysician1(getReportingPhysician1());
		pathologieDataImpl.setReportingPhysician2(getReportingPhysician2());
		pathologieDataImpl.setGynPhysician(getGynPhysician());
		pathologieDataImpl.setValidationPhysician1(getValidationPhysician1());
		pathologieDataImpl.setValidationPhysician2(getValidationPhysician2());
		pathologieDataImpl.setReportStatus(getReportStatus());
		pathologieDataImpl.setNumberOfBlockes(getNumberOfBlockes());
		pathologieDataImpl.setNumberOfSlides(getNumberOfSlides());
		pathologieDataImpl.setBasicDisease(getBasicDisease());
		pathologieDataImpl.setCauseOfDeath(getCauseOfDeath());
		pathologieDataImpl.setMaterial(getMaterial());
		pathologieDataImpl.setMaterialExtended(getMaterialExtended());
		pathologieDataImpl.setMacroscopicDescription(getMacroscopicDescription());
		pathologieDataImpl.setMicroscopicDescription(getMicroscopicDescription());
		pathologieDataImpl.setHistologicDescription(getHistologicDescription());
		pathologieDataImpl.setMolecularPathologicDescription(getMolecularPathologicDescription());
		pathologieDataImpl.setZytologieDescription(getZytologieDescription());
		pathologieDataImpl.setPathologicDiagnosis(getPathologicDiagnosis());
		pathologieDataImpl.setFrozenSectionDiagnosis(getFrozenSectionDiagnosis());
		pathologieDataImpl.setMolecularPathologicDiagnosis(getMolecularPathologicDiagnosis());
		pathologieDataImpl.setZytologieDiagnosis(getZytologieDiagnosis());
		pathologieDataImpl.setNeuroPathologicDiagnosis(getNeuroPathologicDiagnosis());
		pathologieDataImpl.setComment(getComment());
		pathologieDataImpl.setZytologiecomment(getZytologiecomment());
		pathologieDataImpl.setGrad(getGrad());
		pathologieDataImpl.setTnmp(getTnmp());
		pathologieDataImpl.setTnmt(getTnmt());
		pathologieDataImpl.setTnmn(getTnmn());
		pathologieDataImpl.setTnmm(getTnmm());
		pathologieDataImpl.setTnmr(getTnmr());
		pathologieDataImpl.setTnml(getTnml());
		pathologieDataImpl.setTnmv(getTnmv());
		pathologieDataImpl.setTnmpn(getTnmpn());
		pathologieDataImpl.setDgcode1(getDgcode1());
		pathologieDataImpl.setDgcode2(getDgcode2());
		pathologieDataImpl.setPap(getPap());
		pathologieDataImpl.setSmearQuality(getSmearQuality());

		pathologieDataImpl.resetOriginalValues();

		return pathologieDataImpl;
	}

	@Override
	public int compareTo(PathologieData pathologieData) {
		int value = 0;

		if (getPathologieDataId() < pathologieData.getPathologieDataId()) {
			value = -1;
		}
		else if (getPathologieDataId() > pathologieData.getPathologieDataId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PathologieData)) {
			return false;
		}

		PathologieData pathologieData = (PathologieData)obj;

		long primaryKey = pathologieData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PathologieDataModelImpl pathologieDataModelImpl = this;

		pathologieDataModelImpl._originalUuid = pathologieDataModelImpl._uuid;

		pathologieDataModelImpl._originalGroupId = pathologieDataModelImpl._groupId;

		pathologieDataModelImpl._setOriginalGroupId = false;

		pathologieDataModelImpl._originalCompanyId = pathologieDataModelImpl._companyId;

		pathologieDataModelImpl._setOriginalCompanyId = false;

		pathologieDataModelImpl._setModifiedDate = false;

		pathologieDataModelImpl._originalMedicalRecordId = pathologieDataModelImpl._medicalRecordId;

		pathologieDataModelImpl._setOriginalMedicalRecordId = false;

		pathologieDataModelImpl._originalMaterial = pathologieDataModelImpl._material;

		pathologieDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PathologieData> toCacheModel() {
		PathologieDataCacheModel pathologieDataCacheModel = new PathologieDataCacheModel();

		pathologieDataCacheModel.uuid = getUuid();

		String uuid = pathologieDataCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			pathologieDataCacheModel.uuid = null;
		}

		pathologieDataCacheModel.pathologieDataId = getPathologieDataId();

		pathologieDataCacheModel.groupId = getGroupId();

		pathologieDataCacheModel.companyId = getCompanyId();

		pathologieDataCacheModel.userId = getUserId();

		pathologieDataCacheModel.userName = getUserName();

		String userName = pathologieDataCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			pathologieDataCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			pathologieDataCacheModel.createDate = createDate.getTime();
		}
		else {
			pathologieDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			pathologieDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			pathologieDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		pathologieDataCacheModel.status = getStatus();

		pathologieDataCacheModel.statusByUserId = getStatusByUserId();

		pathologieDataCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = pathologieDataCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			pathologieDataCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			pathologieDataCacheModel.statusDate = statusDate.getTime();
		}
		else {
			pathologieDataCacheModel.statusDate = Long.MIN_VALUE;
		}

		pathologieDataCacheModel.medicalRecordId = getMedicalRecordId();

		Date receivedDate = getReceivedDate();

		if (receivedDate != null) {
			pathologieDataCacheModel.receivedDate = receivedDate.getTime();
		}
		else {
			pathologieDataCacheModel.receivedDate = Long.MIN_VALUE;
		}

		Date validationDate = getValidationDate();

		if (validationDate != null) {
			pathologieDataCacheModel.validationDate = validationDate.getTime();
		}
		else {
			pathologieDataCacheModel.validationDate = Long.MIN_VALUE;
		}

		pathologieDataCacheModel.patientAge = getPatientAge();

		pathologieDataCacheModel.sender = getSender();

		String sender = pathologieDataCacheModel.sender;

		if ((sender != null) && (sender.length() == 0)) {
			pathologieDataCacheModel.sender = null;
		}

		pathologieDataCacheModel.extractionMethode = getExtractionMethode();

		String extractionMethode = pathologieDataCacheModel.extractionMethode;

		if ((extractionMethode != null) && (extractionMethode.length() == 0)) {
			pathologieDataCacheModel.extractionMethode = null;
		}

		pathologieDataCacheModel.reportingPhysician1 = getReportingPhysician1();

		String reportingPhysician1 = pathologieDataCacheModel.reportingPhysician1;

		if ((reportingPhysician1 != null) &&
				(reportingPhysician1.length() == 0)) {
			pathologieDataCacheModel.reportingPhysician1 = null;
		}

		pathologieDataCacheModel.reportingPhysician2 = getReportingPhysician2();

		String reportingPhysician2 = pathologieDataCacheModel.reportingPhysician2;

		if ((reportingPhysician2 != null) &&
				(reportingPhysician2.length() == 0)) {
			pathologieDataCacheModel.reportingPhysician2 = null;
		}

		pathologieDataCacheModel.gynPhysician = getGynPhysician();

		String gynPhysician = pathologieDataCacheModel.gynPhysician;

		if ((gynPhysician != null) && (gynPhysician.length() == 0)) {
			pathologieDataCacheModel.gynPhysician = null;
		}

		pathologieDataCacheModel.validationPhysician1 = getValidationPhysician1();

		String validationPhysician1 = pathologieDataCacheModel.validationPhysician1;

		if ((validationPhysician1 != null) &&
				(validationPhysician1.length() == 0)) {
			pathologieDataCacheModel.validationPhysician1 = null;
		}

		pathologieDataCacheModel.validationPhysician2 = getValidationPhysician2();

		String validationPhysician2 = pathologieDataCacheModel.validationPhysician2;

		if ((validationPhysician2 != null) &&
				(validationPhysician2.length() == 0)) {
			pathologieDataCacheModel.validationPhysician2 = null;
		}

		pathologieDataCacheModel.reportStatus = getReportStatus();

		String reportStatus = pathologieDataCacheModel.reportStatus;

		if ((reportStatus != null) && (reportStatus.length() == 0)) {
			pathologieDataCacheModel.reportStatus = null;
		}

		pathologieDataCacheModel.numberOfBlockes = getNumberOfBlockes();

		pathologieDataCacheModel.numberOfSlides = getNumberOfSlides();

		pathologieDataCacheModel.basicDisease = getBasicDisease();

		String basicDisease = pathologieDataCacheModel.basicDisease;

		if ((basicDisease != null) && (basicDisease.length() == 0)) {
			pathologieDataCacheModel.basicDisease = null;
		}

		pathologieDataCacheModel.causeOfDeath = getCauseOfDeath();

		String causeOfDeath = pathologieDataCacheModel.causeOfDeath;

		if ((causeOfDeath != null) && (causeOfDeath.length() == 0)) {
			pathologieDataCacheModel.causeOfDeath = null;
		}

		pathologieDataCacheModel.material = getMaterial();

		String material = pathologieDataCacheModel.material;

		if ((material != null) && (material.length() == 0)) {
			pathologieDataCacheModel.material = null;
		}

		pathologieDataCacheModel.materialExtended = getMaterialExtended();

		String materialExtended = pathologieDataCacheModel.materialExtended;

		if ((materialExtended != null) && (materialExtended.length() == 0)) {
			pathologieDataCacheModel.materialExtended = null;
		}

		pathologieDataCacheModel.macroscopicDescription = getMacroscopicDescription();

		String macroscopicDescription = pathologieDataCacheModel.macroscopicDescription;

		if ((macroscopicDescription != null) &&
				(macroscopicDescription.length() == 0)) {
			pathologieDataCacheModel.macroscopicDescription = null;
		}

		pathologieDataCacheModel.microscopicDescription = getMicroscopicDescription();

		String microscopicDescription = pathologieDataCacheModel.microscopicDescription;

		if ((microscopicDescription != null) &&
				(microscopicDescription.length() == 0)) {
			pathologieDataCacheModel.microscopicDescription = null;
		}

		pathologieDataCacheModel.histologicDescription = getHistologicDescription();

		String histologicDescription = pathologieDataCacheModel.histologicDescription;

		if ((histologicDescription != null) &&
				(histologicDescription.length() == 0)) {
			pathologieDataCacheModel.histologicDescription = null;
		}

		pathologieDataCacheModel.molecularPathologicDescription = getMolecularPathologicDescription();

		String molecularPathologicDescription = pathologieDataCacheModel.molecularPathologicDescription;

		if ((molecularPathologicDescription != null) &&
				(molecularPathologicDescription.length() == 0)) {
			pathologieDataCacheModel.molecularPathologicDescription = null;
		}

		pathologieDataCacheModel.zytologieDescription = getZytologieDescription();

		String zytologieDescription = pathologieDataCacheModel.zytologieDescription;

		if ((zytologieDescription != null) &&
				(zytologieDescription.length() == 0)) {
			pathologieDataCacheModel.zytologieDescription = null;
		}

		pathologieDataCacheModel.pathologicDiagnosis = getPathologicDiagnosis();

		String pathologicDiagnosis = pathologieDataCacheModel.pathologicDiagnosis;

		if ((pathologicDiagnosis != null) &&
				(pathologicDiagnosis.length() == 0)) {
			pathologieDataCacheModel.pathologicDiagnosis = null;
		}

		pathologieDataCacheModel.frozenSectionDiagnosis = getFrozenSectionDiagnosis();

		String frozenSectionDiagnosis = pathologieDataCacheModel.frozenSectionDiagnosis;

		if ((frozenSectionDiagnosis != null) &&
				(frozenSectionDiagnosis.length() == 0)) {
			pathologieDataCacheModel.frozenSectionDiagnosis = null;
		}

		pathologieDataCacheModel.molecularPathologicDiagnosis = getMolecularPathologicDiagnosis();

		String molecularPathologicDiagnosis = pathologieDataCacheModel.molecularPathologicDiagnosis;

		if ((molecularPathologicDiagnosis != null) &&
				(molecularPathologicDiagnosis.length() == 0)) {
			pathologieDataCacheModel.molecularPathologicDiagnosis = null;
		}

		pathologieDataCacheModel.zytologieDiagnosis = getZytologieDiagnosis();

		String zytologieDiagnosis = pathologieDataCacheModel.zytologieDiagnosis;

		if ((zytologieDiagnosis != null) && (zytologieDiagnosis.length() == 0)) {
			pathologieDataCacheModel.zytologieDiagnosis = null;
		}

		pathologieDataCacheModel.neuroPathologicDiagnosis = getNeuroPathologicDiagnosis();

		String neuroPathologicDiagnosis = pathologieDataCacheModel.neuroPathologicDiagnosis;

		if ((neuroPathologicDiagnosis != null) &&
				(neuroPathologicDiagnosis.length() == 0)) {
			pathologieDataCacheModel.neuroPathologicDiagnosis = null;
		}

		pathologieDataCacheModel.comment = getComment();

		String comment = pathologieDataCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			pathologieDataCacheModel.comment = null;
		}

		pathologieDataCacheModel.zytologiecomment = getZytologiecomment();

		String zytologiecomment = pathologieDataCacheModel.zytologiecomment;

		if ((zytologiecomment != null) && (zytologiecomment.length() == 0)) {
			pathologieDataCacheModel.zytologiecomment = null;
		}

		pathologieDataCacheModel.grad = getGrad();

		String grad = pathologieDataCacheModel.grad;

		if ((grad != null) && (grad.length() == 0)) {
			pathologieDataCacheModel.grad = null;
		}

		pathologieDataCacheModel.tnmp = getTnmp();

		String tnmp = pathologieDataCacheModel.tnmp;

		if ((tnmp != null) && (tnmp.length() == 0)) {
			pathologieDataCacheModel.tnmp = null;
		}

		pathologieDataCacheModel.tnmt = getTnmt();

		String tnmt = pathologieDataCacheModel.tnmt;

		if ((tnmt != null) && (tnmt.length() == 0)) {
			pathologieDataCacheModel.tnmt = null;
		}

		pathologieDataCacheModel.tnmn = getTnmn();

		String tnmn = pathologieDataCacheModel.tnmn;

		if ((tnmn != null) && (tnmn.length() == 0)) {
			pathologieDataCacheModel.tnmn = null;
		}

		pathologieDataCacheModel.tnmm = getTnmm();

		String tnmm = pathologieDataCacheModel.tnmm;

		if ((tnmm != null) && (tnmm.length() == 0)) {
			pathologieDataCacheModel.tnmm = null;
		}

		pathologieDataCacheModel.tnmr = getTnmr();

		String tnmr = pathologieDataCacheModel.tnmr;

		if ((tnmr != null) && (tnmr.length() == 0)) {
			pathologieDataCacheModel.tnmr = null;
		}

		pathologieDataCacheModel.tnml = getTnml();

		String tnml = pathologieDataCacheModel.tnml;

		if ((tnml != null) && (tnml.length() == 0)) {
			pathologieDataCacheModel.tnml = null;
		}

		pathologieDataCacheModel.tnmv = getTnmv();

		String tnmv = pathologieDataCacheModel.tnmv;

		if ((tnmv != null) && (tnmv.length() == 0)) {
			pathologieDataCacheModel.tnmv = null;
		}

		pathologieDataCacheModel.tnmpn = getTnmpn();

		String tnmpn = pathologieDataCacheModel.tnmpn;

		if ((tnmpn != null) && (tnmpn.length() == 0)) {
			pathologieDataCacheModel.tnmpn = null;
		}

		pathologieDataCacheModel.dgcode1 = getDgcode1();

		String dgcode1 = pathologieDataCacheModel.dgcode1;

		if ((dgcode1 != null) && (dgcode1.length() == 0)) {
			pathologieDataCacheModel.dgcode1 = null;
		}

		pathologieDataCacheModel.dgcode2 = getDgcode2();

		String dgcode2 = pathologieDataCacheModel.dgcode2;

		if ((dgcode2 != null) && (dgcode2.length() == 0)) {
			pathologieDataCacheModel.dgcode2 = null;
		}

		pathologieDataCacheModel.pap = getPap();

		String pap = pathologieDataCacheModel.pap;

		if ((pap != null) && (pap.length() == 0)) {
			pathologieDataCacheModel.pap = null;
		}

		pathologieDataCacheModel.smearQuality = getSmearQuality();

		String smearQuality = pathologieDataCacheModel.smearQuality;

		if ((smearQuality != null) && (smearQuality.length() == 0)) {
			pathologieDataCacheModel.smearQuality = null;
		}

		return pathologieDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(111);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", pathologieDataId=");
		sb.append(getPathologieDataId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", medicalRecordId=");
		sb.append(getMedicalRecordId());
		sb.append(", receivedDate=");
		sb.append(getReceivedDate());
		sb.append(", validationDate=");
		sb.append(getValidationDate());
		sb.append(", patientAge=");
		sb.append(getPatientAge());
		sb.append(", sender=");
		sb.append(getSender());
		sb.append(", extractionMethode=");
		sb.append(getExtractionMethode());
		sb.append(", reportingPhysician1=");
		sb.append(getReportingPhysician1());
		sb.append(", reportingPhysician2=");
		sb.append(getReportingPhysician2());
		sb.append(", gynPhysician=");
		sb.append(getGynPhysician());
		sb.append(", validationPhysician1=");
		sb.append(getValidationPhysician1());
		sb.append(", validationPhysician2=");
		sb.append(getValidationPhysician2());
		sb.append(", reportStatus=");
		sb.append(getReportStatus());
		sb.append(", numberOfBlockes=");
		sb.append(getNumberOfBlockes());
		sb.append(", numberOfSlides=");
		sb.append(getNumberOfSlides());
		sb.append(", basicDisease=");
		sb.append(getBasicDisease());
		sb.append(", causeOfDeath=");
		sb.append(getCauseOfDeath());
		sb.append(", material=");
		sb.append(getMaterial());
		sb.append(", materialExtended=");
		sb.append(getMaterialExtended());
		sb.append(", macroscopicDescription=");
		sb.append(getMacroscopicDescription());
		sb.append(", microscopicDescription=");
		sb.append(getMicroscopicDescription());
		sb.append(", histologicDescription=");
		sb.append(getHistologicDescription());
		sb.append(", molecularPathologicDescription=");
		sb.append(getMolecularPathologicDescription());
		sb.append(", zytologieDescription=");
		sb.append(getZytologieDescription());
		sb.append(", pathologicDiagnosis=");
		sb.append(getPathologicDiagnosis());
		sb.append(", frozenSectionDiagnosis=");
		sb.append(getFrozenSectionDiagnosis());
		sb.append(", molecularPathologicDiagnosis=");
		sb.append(getMolecularPathologicDiagnosis());
		sb.append(", zytologieDiagnosis=");
		sb.append(getZytologieDiagnosis());
		sb.append(", neuroPathologicDiagnosis=");
		sb.append(getNeuroPathologicDiagnosis());
		sb.append(", comment=");
		sb.append(getComment());
		sb.append(", zytologiecomment=");
		sb.append(getZytologiecomment());
		sb.append(", grad=");
		sb.append(getGrad());
		sb.append(", tnmp=");
		sb.append(getTnmp());
		sb.append(", tnmt=");
		sb.append(getTnmt());
		sb.append(", tnmn=");
		sb.append(getTnmn());
		sb.append(", tnmm=");
		sb.append(getTnmm());
		sb.append(", tnmr=");
		sb.append(getTnmr());
		sb.append(", tnml=");
		sb.append(getTnml());
		sb.append(", tnmv=");
		sb.append(getTnmv());
		sb.append(", tnmpn=");
		sb.append(getTnmpn());
		sb.append(", dgcode1=");
		sb.append(getDgcode1());
		sb.append(", dgcode2=");
		sb.append(getDgcode2());
		sb.append(", pap=");
		sb.append(getPap());
		sb.append(", smearQuality=");
		sb.append(getSmearQuality());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(169);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.bibbox.medicaldataset.model.PathologieData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pathologieDataId</column-name><column-value><![CDATA[");
		sb.append(getPathologieDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>medicalRecordId</column-name><column-value><![CDATA[");
		sb.append(getMedicalRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receivedDate</column-name><column-value><![CDATA[");
		sb.append(getReceivedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validationDate</column-name><column-value><![CDATA[");
		sb.append(getValidationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patientAge</column-name><column-value><![CDATA[");
		sb.append(getPatientAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sender</column-name><column-value><![CDATA[");
		sb.append(getSender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extractionMethode</column-name><column-value><![CDATA[");
		sb.append(getExtractionMethode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportingPhysician1</column-name><column-value><![CDATA[");
		sb.append(getReportingPhysician1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportingPhysician2</column-name><column-value><![CDATA[");
		sb.append(getReportingPhysician2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gynPhysician</column-name><column-value><![CDATA[");
		sb.append(getGynPhysician());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validationPhysician1</column-name><column-value><![CDATA[");
		sb.append(getValidationPhysician1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validationPhysician2</column-name><column-value><![CDATA[");
		sb.append(getValidationPhysician2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportStatus</column-name><column-value><![CDATA[");
		sb.append(getReportStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfBlockes</column-name><column-value><![CDATA[");
		sb.append(getNumberOfBlockes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfSlides</column-name><column-value><![CDATA[");
		sb.append(getNumberOfSlides());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basicDisease</column-name><column-value><![CDATA[");
		sb.append(getBasicDisease());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>causeOfDeath</column-name><column-value><![CDATA[");
		sb.append(getCauseOfDeath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>material</column-name><column-value><![CDATA[");
		sb.append(getMaterial());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialExtended</column-name><column-value><![CDATA[");
		sb.append(getMaterialExtended());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>macroscopicDescription</column-name><column-value><![CDATA[");
		sb.append(getMacroscopicDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>microscopicDescription</column-name><column-value><![CDATA[");
		sb.append(getMicroscopicDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>histologicDescription</column-name><column-value><![CDATA[");
		sb.append(getHistologicDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>molecularPathologicDescription</column-name><column-value><![CDATA[");
		sb.append(getMolecularPathologicDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zytologieDescription</column-name><column-value><![CDATA[");
		sb.append(getZytologieDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pathologicDiagnosis</column-name><column-value><![CDATA[");
		sb.append(getPathologicDiagnosis());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frozenSectionDiagnosis</column-name><column-value><![CDATA[");
		sb.append(getFrozenSectionDiagnosis());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>molecularPathologicDiagnosis</column-name><column-value><![CDATA[");
		sb.append(getMolecularPathologicDiagnosis());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zytologieDiagnosis</column-name><column-value><![CDATA[");
		sb.append(getZytologieDiagnosis());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>neuroPathologicDiagnosis</column-name><column-value><![CDATA[");
		sb.append(getNeuroPathologicDiagnosis());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comment</column-name><column-value><![CDATA[");
		sb.append(getComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zytologiecomment</column-name><column-value><![CDATA[");
		sb.append(getZytologiecomment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grad</column-name><column-value><![CDATA[");
		sb.append(getGrad());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tnmp</column-name><column-value><![CDATA[");
		sb.append(getTnmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tnmt</column-name><column-value><![CDATA[");
		sb.append(getTnmt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tnmn</column-name><column-value><![CDATA[");
		sb.append(getTnmn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tnmm</column-name><column-value><![CDATA[");
		sb.append(getTnmm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tnmr</column-name><column-value><![CDATA[");
		sb.append(getTnmr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tnml</column-name><column-value><![CDATA[");
		sb.append(getTnml());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tnmv</column-name><column-value><![CDATA[");
		sb.append(getTnmv());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tnmpn</column-name><column-value><![CDATA[");
		sb.append(getTnmpn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dgcode1</column-name><column-value><![CDATA[");
		sb.append(getDgcode1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dgcode2</column-name><column-value><![CDATA[");
		sb.append(getDgcode2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pap</column-name><column-value><![CDATA[");
		sb.append(getPap());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smearQuality</column-name><column-value><![CDATA[");
		sb.append(getSmearQuality());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PathologieData.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PathologieData.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _pathologieDataId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _medicalRecordId;
	private long _originalMedicalRecordId;
	private boolean _setOriginalMedicalRecordId;
	private Date _receivedDate;
	private Date _validationDate;
	private int _patientAge;
	private String _sender;
	private String _extractionMethode;
	private String _reportingPhysician1;
	private String _reportingPhysician2;
	private String _gynPhysician;
	private String _validationPhysician1;
	private String _validationPhysician2;
	private String _reportStatus;
	private int _numberOfBlockes;
	private int _numberOfSlides;
	private String _basicDisease;
	private String _causeOfDeath;
	private String _material;
	private String _originalMaterial;
	private String _materialExtended;
	private String _macroscopicDescription;
	private String _microscopicDescription;
	private String _histologicDescription;
	private String _molecularPathologicDescription;
	private String _zytologieDescription;
	private String _pathologicDiagnosis;
	private String _frozenSectionDiagnosis;
	private String _molecularPathologicDiagnosis;
	private String _zytologieDiagnosis;
	private String _neuroPathologicDiagnosis;
	private String _comment;
	private String _zytologiecomment;
	private String _grad;
	private String _tnmp;
	private String _tnmt;
	private String _tnmn;
	private String _tnmm;
	private String _tnmr;
	private String _tnml;
	private String _tnmv;
	private String _tnmpn;
	private String _dgcode1;
	private String _dgcode2;
	private String _pap;
	private String _smearQuality;
	private long _columnBitmask;
	private PathologieData _escapedModel;
}