/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.bibbox.medicaldataset.model.impl;

import aQute.bnd.annotation.ProviderType;

import at.graz.meduni.bibbox.medicaldataset.model.ImportMedicalDataSetFieldMap;
import at.graz.meduni.bibbox.medicaldataset.model.ImportMedicalDataSetFieldMapModel;
import at.graz.meduni.bibbox.medicaldataset.model.ImportMedicalDataSetFieldMapSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ImportMedicalDataSetFieldMap service. Represents a row in the &quot;FOO_ImportMedicalDataSetFieldMap&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ImportMedicalDataSetFieldMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImportMedicalDataSetFieldMapImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ImportMedicalDataSetFieldMapImpl
 * @see ImportMedicalDataSetFieldMap
 * @see ImportMedicalDataSetFieldMapModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ImportMedicalDataSetFieldMapModelImpl extends BaseModelImpl<ImportMedicalDataSetFieldMap>
	implements ImportMedicalDataSetFieldMapModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a import medical data set field map model instance should use the {@link ImportMedicalDataSetFieldMap} interface instead.
	 */
	public static final String TABLE_NAME = "FOO_ImportMedicalDataSetFieldMap";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "importMedicalDataSetFieldMapId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "importMedicalDataSetId", Types.BIGINT },
			{ "importField", Types.VARCHAR },
			{ "importFieldPath", Types.VARCHAR },
			{ "sampleValue", Types.VARCHAR },
			{ "TableName", Types.VARCHAR },
			{ "TableField", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importMedicalDataSetFieldMapId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("importMedicalDataSetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("importField", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importFieldPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TableName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TableField", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table FOO_ImportMedicalDataSetFieldMap (uuid_ VARCHAR(75) null,importMedicalDataSetFieldMapId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,importMedicalDataSetId LONG,importField VARCHAR(1000) null,importFieldPath VARCHAR(1000) null,sampleValue VARCHAR(1000) null,TableName VARCHAR(1000) null,TableField VARCHAR(1000) null)";
	public static final String TABLE_SQL_DROP = "drop table FOO_ImportMedicalDataSetFieldMap";
	public static final String ORDER_BY_JPQL = " ORDER BY importMedicalDataSetFieldMap.importMedicalDataSetFieldMapId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FOO_ImportMedicalDataSetFieldMap.importMedicalDataSetFieldMapId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(at.graz.meduni.bibbox.medicaldataset.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.bibbox.medicaldataset.model.ImportMedicalDataSetFieldMap"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(at.graz.meduni.bibbox.medicaldataset.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.bibbox.medicaldataset.model.ImportMedicalDataSetFieldMap"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(at.graz.meduni.bibbox.medicaldataset.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.bibbox.medicaldataset.model.ImportMedicalDataSetFieldMap"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long IMPORTMEDICALDATASETID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long IMPORTMEDICALDATASETFIELDMAPID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ImportMedicalDataSetFieldMap toModel(
		ImportMedicalDataSetFieldMapSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ImportMedicalDataSetFieldMap model = new ImportMedicalDataSetFieldMapImpl();

		model.setUuid(soapModel.getUuid());
		model.setImportMedicalDataSetFieldMapId(soapModel.getImportMedicalDataSetFieldMapId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setImportMedicalDataSetId(soapModel.getImportMedicalDataSetId());
		model.setImportField(soapModel.getImportField());
		model.setImportFieldPath(soapModel.getImportFieldPath());
		model.setSampleValue(soapModel.getSampleValue());
		model.setTableName(soapModel.getTableName());
		model.setTableField(soapModel.getTableField());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ImportMedicalDataSetFieldMap> toModels(
		ImportMedicalDataSetFieldMapSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ImportMedicalDataSetFieldMap> models = new ArrayList<ImportMedicalDataSetFieldMap>(soapModels.length);

		for (ImportMedicalDataSetFieldMapSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(at.graz.meduni.bibbox.medicaldataset.service.util.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.bibbox.medicaldataset.model.ImportMedicalDataSetFieldMap"));

	public ImportMedicalDataSetFieldMapModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _importMedicalDataSetFieldMapId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setImportMedicalDataSetFieldMapId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _importMedicalDataSetFieldMapId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImportMedicalDataSetFieldMap.class;
	}

	@Override
	public String getModelClassName() {
		return ImportMedicalDataSetFieldMap.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("importMedicalDataSetFieldMapId",
			getImportMedicalDataSetFieldMapId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("importMedicalDataSetId", getImportMedicalDataSetId());
		attributes.put("importField", getImportField());
		attributes.put("importFieldPath", getImportFieldPath());
		attributes.put("sampleValue", getSampleValue());
		attributes.put("TableName", getTableName());
		attributes.put("TableField", getTableField());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long importMedicalDataSetFieldMapId = (Long)attributes.get(
				"importMedicalDataSetFieldMapId");

		if (importMedicalDataSetFieldMapId != null) {
			setImportMedicalDataSetFieldMapId(importMedicalDataSetFieldMapId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Long importMedicalDataSetId = (Long)attributes.get(
				"importMedicalDataSetId");

		if (importMedicalDataSetId != null) {
			setImportMedicalDataSetId(importMedicalDataSetId);
		}

		String importField = (String)attributes.get("importField");

		if (importField != null) {
			setImportField(importField);
		}

		String importFieldPath = (String)attributes.get("importFieldPath");

		if (importFieldPath != null) {
			setImportFieldPath(importFieldPath);
		}

		String sampleValue = (String)attributes.get("sampleValue");

		if (sampleValue != null) {
			setSampleValue(sampleValue);
		}

		String TableName = (String)attributes.get("TableName");

		if (TableName != null) {
			setTableName(TableName);
		}

		String TableField = (String)attributes.get("TableField");

		if (TableField != null) {
			setTableField(TableField);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getImportMedicalDataSetFieldMapId() {
		return _importMedicalDataSetFieldMapId;
	}

	@Override
	public void setImportMedicalDataSetFieldMapId(
		long importMedicalDataSetFieldMapId) {
		_columnBitmask = -1L;

		_importMedicalDataSetFieldMapId = importMedicalDataSetFieldMapId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getImportMedicalDataSetId() {
		return _importMedicalDataSetId;
	}

	@Override
	public void setImportMedicalDataSetId(long importMedicalDataSetId) {
		_columnBitmask |= IMPORTMEDICALDATASETID_COLUMN_BITMASK;

		if (!_setOriginalImportMedicalDataSetId) {
			_setOriginalImportMedicalDataSetId = true;

			_originalImportMedicalDataSetId = _importMedicalDataSetId;
		}

		_importMedicalDataSetId = importMedicalDataSetId;
	}

	public long getOriginalImportMedicalDataSetId() {
		return _originalImportMedicalDataSetId;
	}

	@JSON
	@Override
	public String getImportField() {
		if (_importField == null) {
			return StringPool.BLANK;
		}
		else {
			return _importField;
		}
	}

	@Override
	public void setImportField(String importField) {
		_importField = importField;
	}

	@JSON
	@Override
	public String getImportFieldPath() {
		if (_importFieldPath == null) {
			return StringPool.BLANK;
		}
		else {
			return _importFieldPath;
		}
	}

	@Override
	public void setImportFieldPath(String importFieldPath) {
		_importFieldPath = importFieldPath;
	}

	@JSON
	@Override
	public String getSampleValue() {
		if (_sampleValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleValue;
		}
	}

	@Override
	public void setSampleValue(String sampleValue) {
		_sampleValue = sampleValue;
	}

	@JSON
	@Override
	public String getTableName() {
		if (_TableName == null) {
			return StringPool.BLANK;
		}
		else {
			return _TableName;
		}
	}

	@Override
	public void setTableName(String TableName) {
		_TableName = TableName;
	}

	@JSON
	@Override
	public String getTableField() {
		if (_TableField == null) {
			return StringPool.BLANK;
		}
		else {
			return _TableField;
		}
	}

	@Override
	public void setTableField(String TableField) {
		_TableField = TableField;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ImportMedicalDataSetFieldMap.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ImportMedicalDataSetFieldMap.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ImportMedicalDataSetFieldMap toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ImportMedicalDataSetFieldMap)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImportMedicalDataSetFieldMapImpl importMedicalDataSetFieldMapImpl = new ImportMedicalDataSetFieldMapImpl();

		importMedicalDataSetFieldMapImpl.setUuid(getUuid());
		importMedicalDataSetFieldMapImpl.setImportMedicalDataSetFieldMapId(getImportMedicalDataSetFieldMapId());
		importMedicalDataSetFieldMapImpl.setGroupId(getGroupId());
		importMedicalDataSetFieldMapImpl.setCompanyId(getCompanyId());
		importMedicalDataSetFieldMapImpl.setUserId(getUserId());
		importMedicalDataSetFieldMapImpl.setUserName(getUserName());
		importMedicalDataSetFieldMapImpl.setCreateDate(getCreateDate());
		importMedicalDataSetFieldMapImpl.setModifiedDate(getModifiedDate());
		importMedicalDataSetFieldMapImpl.setStatus(getStatus());
		importMedicalDataSetFieldMapImpl.setStatusByUserId(getStatusByUserId());
		importMedicalDataSetFieldMapImpl.setStatusByUserName(getStatusByUserName());
		importMedicalDataSetFieldMapImpl.setStatusDate(getStatusDate());
		importMedicalDataSetFieldMapImpl.setImportMedicalDataSetId(getImportMedicalDataSetId());
		importMedicalDataSetFieldMapImpl.setImportField(getImportField());
		importMedicalDataSetFieldMapImpl.setImportFieldPath(getImportFieldPath());
		importMedicalDataSetFieldMapImpl.setSampleValue(getSampleValue());
		importMedicalDataSetFieldMapImpl.setTableName(getTableName());
		importMedicalDataSetFieldMapImpl.setTableField(getTableField());

		importMedicalDataSetFieldMapImpl.resetOriginalValues();

		return importMedicalDataSetFieldMapImpl;
	}

	@Override
	public int compareTo(
		ImportMedicalDataSetFieldMap importMedicalDataSetFieldMap) {
		int value = 0;

		if (getImportMedicalDataSetFieldMapId() < importMedicalDataSetFieldMap.getImportMedicalDataSetFieldMapId()) {
			value = -1;
		}
		else if (getImportMedicalDataSetFieldMapId() > importMedicalDataSetFieldMap.getImportMedicalDataSetFieldMapId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ImportMedicalDataSetFieldMap)) {
			return false;
		}

		ImportMedicalDataSetFieldMap importMedicalDataSetFieldMap = (ImportMedicalDataSetFieldMap)obj;

		long primaryKey = importMedicalDataSetFieldMap.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ImportMedicalDataSetFieldMapModelImpl importMedicalDataSetFieldMapModelImpl =
			this;

		importMedicalDataSetFieldMapModelImpl._originalUuid = importMedicalDataSetFieldMapModelImpl._uuid;

		importMedicalDataSetFieldMapModelImpl._originalGroupId = importMedicalDataSetFieldMapModelImpl._groupId;

		importMedicalDataSetFieldMapModelImpl._setOriginalGroupId = false;

		importMedicalDataSetFieldMapModelImpl._originalCompanyId = importMedicalDataSetFieldMapModelImpl._companyId;

		importMedicalDataSetFieldMapModelImpl._setOriginalCompanyId = false;

		importMedicalDataSetFieldMapModelImpl._setModifiedDate = false;

		importMedicalDataSetFieldMapModelImpl._originalImportMedicalDataSetId = importMedicalDataSetFieldMapModelImpl._importMedicalDataSetId;

		importMedicalDataSetFieldMapModelImpl._setOriginalImportMedicalDataSetId = false;

		importMedicalDataSetFieldMapModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ImportMedicalDataSetFieldMap> toCacheModel() {
		ImportMedicalDataSetFieldMapCacheModel importMedicalDataSetFieldMapCacheModel =
			new ImportMedicalDataSetFieldMapCacheModel();

		importMedicalDataSetFieldMapCacheModel.uuid = getUuid();

		String uuid = importMedicalDataSetFieldMapCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			importMedicalDataSetFieldMapCacheModel.uuid = null;
		}

		importMedicalDataSetFieldMapCacheModel.importMedicalDataSetFieldMapId = getImportMedicalDataSetFieldMapId();

		importMedicalDataSetFieldMapCacheModel.groupId = getGroupId();

		importMedicalDataSetFieldMapCacheModel.companyId = getCompanyId();

		importMedicalDataSetFieldMapCacheModel.userId = getUserId();

		importMedicalDataSetFieldMapCacheModel.userName = getUserName();

		String userName = importMedicalDataSetFieldMapCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			importMedicalDataSetFieldMapCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			importMedicalDataSetFieldMapCacheModel.createDate = createDate.getTime();
		}
		else {
			importMedicalDataSetFieldMapCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			importMedicalDataSetFieldMapCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			importMedicalDataSetFieldMapCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		importMedicalDataSetFieldMapCacheModel.status = getStatus();

		importMedicalDataSetFieldMapCacheModel.statusByUserId = getStatusByUserId();

		importMedicalDataSetFieldMapCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = importMedicalDataSetFieldMapCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			importMedicalDataSetFieldMapCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			importMedicalDataSetFieldMapCacheModel.statusDate = statusDate.getTime();
		}
		else {
			importMedicalDataSetFieldMapCacheModel.statusDate = Long.MIN_VALUE;
		}

		importMedicalDataSetFieldMapCacheModel.importMedicalDataSetId = getImportMedicalDataSetId();

		importMedicalDataSetFieldMapCacheModel.importField = getImportField();

		String importField = importMedicalDataSetFieldMapCacheModel.importField;

		if ((importField != null) && (importField.length() == 0)) {
			importMedicalDataSetFieldMapCacheModel.importField = null;
		}

		importMedicalDataSetFieldMapCacheModel.importFieldPath = getImportFieldPath();

		String importFieldPath = importMedicalDataSetFieldMapCacheModel.importFieldPath;

		if ((importFieldPath != null) && (importFieldPath.length() == 0)) {
			importMedicalDataSetFieldMapCacheModel.importFieldPath = null;
		}

		importMedicalDataSetFieldMapCacheModel.sampleValue = getSampleValue();

		String sampleValue = importMedicalDataSetFieldMapCacheModel.sampleValue;

		if ((sampleValue != null) && (sampleValue.length() == 0)) {
			importMedicalDataSetFieldMapCacheModel.sampleValue = null;
		}

		importMedicalDataSetFieldMapCacheModel.TableName = getTableName();

		String TableName = importMedicalDataSetFieldMapCacheModel.TableName;

		if ((TableName != null) && (TableName.length() == 0)) {
			importMedicalDataSetFieldMapCacheModel.TableName = null;
		}

		importMedicalDataSetFieldMapCacheModel.TableField = getTableField();

		String TableField = importMedicalDataSetFieldMapCacheModel.TableField;

		if ((TableField != null) && (TableField.length() == 0)) {
			importMedicalDataSetFieldMapCacheModel.TableField = null;
		}

		return importMedicalDataSetFieldMapCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", importMedicalDataSetFieldMapId=");
		sb.append(getImportMedicalDataSetFieldMapId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", importMedicalDataSetId=");
		sb.append(getImportMedicalDataSetId());
		sb.append(", importField=");
		sb.append(getImportField());
		sb.append(", importFieldPath=");
		sb.append(getImportFieldPath());
		sb.append(", sampleValue=");
		sb.append(getSampleValue());
		sb.append(", TableName=");
		sb.append(getTableName());
		sb.append(", TableField=");
		sb.append(getTableField());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.bibbox.medicaldataset.model.ImportMedicalDataSetFieldMap");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importMedicalDataSetFieldMapId</column-name><column-value><![CDATA[");
		sb.append(getImportMedicalDataSetFieldMapId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importMedicalDataSetId</column-name><column-value><![CDATA[");
		sb.append(getImportMedicalDataSetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importField</column-name><column-value><![CDATA[");
		sb.append(getImportField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importFieldPath</column-name><column-value><![CDATA[");
		sb.append(getImportFieldPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleValue</column-name><column-value><![CDATA[");
		sb.append(getSampleValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TableName</column-name><column-value><![CDATA[");
		sb.append(getTableName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TableField</column-name><column-value><![CDATA[");
		sb.append(getTableField());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ImportMedicalDataSetFieldMap.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ImportMedicalDataSetFieldMap.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _importMedicalDataSetFieldMapId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _importMedicalDataSetId;
	private long _originalImportMedicalDataSetId;
	private boolean _setOriginalImportMedicalDataSetId;
	private String _importField;
	private String _importFieldPath;
	private String _sampleValue;
	private String _TableName;
	private String _TableField;
	private long _columnBitmask;
	private ImportMedicalDataSetFieldMap _escapedModel;
}